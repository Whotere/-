Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.lambakean</groupId>\n    <artifactId>rationplanner</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\n    <properties>\n        <maven.compiler.source>1.8</maven.compiler.source>\n        <maven.compiler.target>1.8</maven.compiler.target>\n        <mapstruct.version>1.4.2.Final</mapstruct.version>\n        <postgresql.driver.version>42.3.3</postgresql.driver.version>\n        <lombok.version>1.18.22</lombok.version>\n        <liquibase.version>4.9.0</liquibase.version>\n    </properties>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.6.1</version>\n    </parent>\n\n    <dependencies>\n        <!-- Spring Boot Modules -->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-jdbc</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.security</groupId>\n            <artifactId>spring-security-crypto</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-security</artifactId>\n        </dependency>\n\n        <!-- JSON mapper -->\n        <dependency>\n            <groupId>org.json</groupId>\n            <artifactId>json</artifactId>\n            <version>20180813</version>\n        </dependency>\n\n        <!-- JDBC driver -->\n        <dependency>\n            <groupId>org.postgresql</groupId>\n            <artifactId>postgresql</artifactId>\n            <version>${postgresql.driver.version}</version>\n        </dependency>\n\n        <!-- Liquibase -->\n        <dependency>\n            <groupId>org.liquibase</groupId>\n            <artifactId>liquibase-core</artifactId>\n            <version>${liquibase.version}</version>\n        </dependency>\n\n        <!-- Mapstruct for object mapping -->\n        <dependency>\n            <groupId>org.mapstruct</groupId>\n            <artifactId>mapstruct</artifactId>\n            <version>${mapstruct.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.mapstruct</groupId>\n            <artifactId>mapstruct-processor</artifactId>\n            <version>${mapstruct.version}</version>\n        </dependency>\n\n        <!-- Library to work with JWT tokens -->\n        <dependency>\n            <groupId>io.jsonwebtoken</groupId>\n            <artifactId>jjwt</artifactId>\n            <version>0.8.0</version>\n        </dependency>\n\n        <!-- Lombok -->\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <version>${lombok.version}</version>\n            <scope>provided</scope>\n        </dependency>\n\n        <!-- Swagger -->\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-boot-starter</artifactId>\n            <version>3.0.0</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <source>1.8</source>\n                    <target>1.8</target>\n                    <annotationProcessorPaths>\n                        <path>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                            <version>${lombok.version}</version>\n                        </path>\n                        <path>\n                            <groupId>org.mapstruct</groupId>\n                            <artifactId>mapstruct-processor</artifactId>\n                            <version>${mapstruct.version}</version>\n                        </path>\n                    </annotationProcessorPaths>\n                    <compilerArgs>\n                        <compilerArg>\n                            -Amapstruct.suppressGeneratorTimestamp=true\n                        </compilerArg>\n                        <compilerArg>\n                            -Amapstruct.suppressGeneratorVersionInfoComment=true\n                        </compilerArg>\n                        <compilerArg>\n                            -Amapstruct.defaultComponentModel=spring\n                        </compilerArg>\n                    </compilerArgs>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-jar-plugin</artifactId>\n                <version>3.1.0</version>\n                <configuration>\n                    <archive>\n                        <manifest>\n                            <addClasspath>true</addClasspath>\n                            <classpathPrefix>dependency-jars/</classpathPrefix>\n                            <mainClass>com.lambakean.rationplanner.Application</mainClass>\n                        </manifest>\n                    </archive>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-dependency-plugin</artifactId>\n                <version>2.5.1</version>\n                <executions>\n                    <execution>\n                        <id>copy-dependencies</id>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>copy-dependencies</goal>\n                        </goals>\n                        <configuration>\n                            <outputDirectory>\n                                ${project.build.directory}/dependency-jars/\n                            </outputDirectory>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <configuration>\n                    <excludes>\n                        <exclude>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                        </exclude>\n                    </excludes>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>org.liquibase</groupId>\n                <artifactId>liquibase-maven-plugin</artifactId>\n                <version>${liquibase.version}</version>\n            </plugin>\n        </plugins>\n    </build>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ b/pom.xml	(date 1713367839147)
@@ -145,7 +145,7 @@
                         <manifest>
                             <addClasspath>true</addClasspath>
                             <classpathPrefix>dependency-jars/</classpathPrefix>
-                            <mainClass>com.lambakean.rationplanner.Application</mainClass>
+                            <mainClass>com.whotere.rationplanner.Application</mainClass>
                         </manifest>
                     </archive>
                 </configuration>
Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring.profiles.active=${SPRING_PROFILES_ACTIVE}\n\nspring.datasource.driver-class-name=org.postgresql.Driver\n\nspring.jpa.generate-ddl=false\nspring.jpa.hibernate.ddl-auto=validate\n\nspring.liquibase.enabled=true\nspring.liquibase.change-log=classpath:db/changelog/db.changelog-master.xml\n\naccess-token.validity-time-in-minutes=120\nrefresh-token.validity-time-in-minutes=10080\n\nspring.servlet.multipart.max-file-size=8192KB\nspring.servlet.multipart.max-request-size=12288KB\n\n# swagger doesn't work without this\nspring.mvc.pathmatch.matching-strategy=ant_path_matcher
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
--- a/src/main/resources/application.properties	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ b/src/main/resources/application.properties	(date 1713367176467)
@@ -1,4 +1,4 @@
-spring.profiles.active=${SPRING_PROFILES_ACTIVE}
+spring.profiles.active=profileTemplate
 
 spring.datasource.driver-class-name=org.postgresql.Driver
 
Index: src/main/resources/application-profileTemplate.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Template for creating a custom profile\n\n# e.g. jdbc:postgresql://localhost:5432/storytalks\nspring.datasource.url = YOUR_DATABASE_URL\n\n# e.g. user123\nspring.datasource.username = YOUR_DATABASE_USER_NAME\n\n# e.g. password123\nspring.datasource.password = YOUR_DATABASE_PASSWORD\n\n# e.g. WnHwsdT0yQas4sAl7RFslvat5b7Gxu9IyhLredtCz7ZTQgBatgg1oUm6UVNh\njwt.secret=YOUR_ACCESS_TOKENS_SECRET_KEY
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/application-profileTemplate.properties b/src/main/resources/application-profileTemplate.properties
--- a/src/main/resources/application-profileTemplate.properties	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ b/src/main/resources/application-profileTemplate.properties	(date 1713366832617)
@@ -1,13 +1,13 @@
 # Template for creating a custom profile
 
 # e.g. jdbc:postgresql://localhost:5432/storytalks
-spring.datasource.url = YOUR_DATABASE_URL
+spring.datasource.url = jdbc:postgresql://localhost:5432/planner
 
 # e.g. user123
-spring.datasource.username = YOUR_DATABASE_USER_NAME
+spring.datasource.username = postgres
 
 # e.g. password123
-spring.datasource.password = YOUR_DATABASE_PASSWORD
+spring.datasource.password = danik22081
 
 # e.g. WnHwsdT0yQas4sAl7RFslvat5b7Gxu9IyhLredtCz7ZTQgBatgg1oUm6UVNh
-jwt.secret=YOUR_ACCESS_TOKENS_SECRET_KEY
\ No newline at end of file
+jwt.secret=WnHwsdT0yQas4sAl7RFslvat5b7Gxu9IyhLredtCz7ZTQgBatgg1oUm6UVNh
\ No newline at end of file
Index: src/main/java/com/lambakean/rationplanner/data/model/ProductQuantity.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/data/model/ProductQuantity.java b/src/main/java/com/lambakean/rationplanner/data/model/ProductQuantity.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/data/model/ProductQuantity.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,39 +0,0 @@
-package com.lambakean.rationplanner.data.model;
-
-import lombok.Getter;
-import lombok.NoArgsConstructor;
-import lombok.Setter;
-
-import javax.persistence.*;
-
-@Entity
-@Table(name = "quantities")
-@NoArgsConstructor
-@Getter
-@Setter
-public class ProductQuantity extends BaseEntity {
-
-    @Column(nullable = false)
-    private Double amount;
-
-    @ManyToOne
-    @JoinColumn(name = "measurement_unit_id", nullable = false)
-    private MeasurementUnit measurementUnit;
-
-    @OneToOne(mappedBy = "quantity")
-    private Product product;
-
-    @OneToOne(mappedBy = "productQuantity")
-    private Ingredient ingredient;
-
-    public ProductQuantity(Double amount, MeasurementUnit measurementUnit) {
-        this.amount = amount;
-        this.measurementUnit = measurementUnit;
-    }
-
-    public String getMeasurementUnitId() {
-
-        if(measurementUnit == null) return null;
-        return measurementUnit.getId();
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/representation/dto/EntityIdReferenceDto.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/dto/EntityIdReferenceDto.java b/src/main/java/com/lambakean/rationplanner/representation/dto/EntityIdReferenceDto.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/dto/EntityIdReferenceDto.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,11 +0,0 @@
-package com.lambakean.rationplanner.representation.dto;
-
-import lombok.Getter;
-import lombok.Setter;
-
-@Getter
-@Setter
-public class EntityIdReferenceDto {
-
-    private String id;
-}
Index: src/main/java/com/lambakean/rationplanner/domain/mapper/ScheduledPlannedDayMapper.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/mapper/ScheduledPlannedDayMapper.java b/src/main/java/com/lambakean/rationplanner/domain/mapper/ScheduledPlannedDayMapper.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/mapper/ScheduledPlannedDayMapper.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,34 +0,0 @@
-package com.lambakean.rationplanner.domain.mapper;
-
-import com.lambakean.rationplanner.data.model.ScheduledPlannedDay;
-import com.lambakean.rationplanner.representation.dto.DateDto;
-import com.lambakean.rationplanner.representation.dto.ScheduledPlannedDayDto;
-import org.mapstruct.Mapper;
-import org.mapstruct.Mapping;
-import org.springframework.beans.factory.annotation.Autowired;
-
-import java.time.LocalDate;
-
-@Mapper(componentModel = "spring")
-public abstract class ScheduledPlannedDayMapper {
-
-    @Autowired
-    protected DateAndTimeMapper dateAndTimeMapper;
-
-    @Autowired
-    protected PlannedDayMapper plannedDayMapper;
-
-    @Mapping(
-            target = "plannedDay",
-            expression = "java(plannedDayMapper.toPlannedDayDto(scheduledPlannedDay.getPlannedDay()))"
-    )
-    public abstract ScheduledPlannedDayDto toScheduledPlannedDayDto(ScheduledPlannedDay scheduledPlannedDay);
-
-    protected LocalDate map(DateDto dateDto) {
-        return dateAndTimeMapper.toLocalDate(dateDto);
-    }
-
-    protected DateDto map(LocalDate localDate) {
-        return dateAndTimeMapper.toDateDto(localDate);
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/domain/service/ProductService.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/service/ProductService.java b/src/main/java/com/lambakean/rationplanner/domain/service/ProductService.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/service/ProductService.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,16 +0,0 @@
-package com.lambakean.rationplanner.domain.service;
-
-import com.lambakean.rationplanner.data.model.Product;
-
-import java.util.List;
-
-public interface ProductService {
-
-    Product createProduct(Product productData);
-
-    Product getProductById(String id);
-
-    List<Product> getCurrentUserProducts();
-
-    void deleteProductById(String id);
-}
Index: src/main/java/com/lambakean/rationplanner/representation/controller/MealController.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/controller/MealController.java b/src/main/java/com/lambakean/rationplanner/representation/controller/MealController.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/controller/MealController.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,65 +0,0 @@
-package com.lambakean.rationplanner.representation.controller;
-
-import com.lambakean.rationplanner.representation.dto.MealDto;
-import com.lambakean.rationplanner.representation.dto.form.MealCreationForm;
-import com.lambakean.rationplanner.domain.mapper.MealMapper;
-import com.lambakean.rationplanner.data.model.Meal;
-import com.lambakean.rationplanner.domain.service.MealService;
-import io.swagger.annotations.ApiOperation;
-import lombok.RequiredArgsConstructor;
-import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.*;
-
-import java.util.List;
-import java.util.stream.Collectors;
-
-@RestController
-@RequestMapping("/api/v1/meal")
-@RequiredArgsConstructor
-public class MealController {
-
-    private final MealService mealService;
-    private final MealMapper mealMapper;
-
-    @ApiOperation("Создание блюда")
-    @PostMapping
-    public ResponseEntity<MealDto> createMeal(@RequestBody MealCreationForm mealCreationForm) {
-
-        Meal createdMeal = mealService.createMeal(mealMapper.toMeal(mealCreationForm));
-        MealDto createdMealDto = mealMapper.toMealDto(createdMeal);
-
-        return ResponseEntity.ok(createdMealDto);
-    }
-
-    @ApiOperation("Получение списка блюд текущего пользователя")
-    @GetMapping
-    public ResponseEntity<List<MealDto>> getMeals() {
-
-        List<Meal> currentUserMeals = mealService.getCurrentUserMeals();
-
-        return ResponseEntity.ok(
-                currentUserMeals
-                        .stream()
-                        .map(mealMapper::toMealDto)
-                        .collect(Collectors.toList())
-        );
-    }
-
-    @ApiOperation("Получение информации о блюде по его id")
-    @GetMapping("/{id}")
-    public ResponseEntity<MealDto> getMealById(@PathVariable String id) {
-
-        Meal meal = mealService.getMealById(id);
-
-        return ResponseEntity.ok(mealMapper.toMealDto(meal));
-    }
-
-    @ApiOperation("Удаление блюда по его id")
-    @DeleteMapping("/{id}")
-    public ResponseEntity<Void> deleteMealById(@PathVariable String id) {
-
-        mealService.deleteMealById(id);
-
-        return ResponseEntity.noContent().build();
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/data/model/User.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/data/model/User.java b/src/main/java/com/lambakean/rationplanner/data/model/User.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/data/model/User.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,29 +0,0 @@
-package com.lambakean.rationplanner.data.model;
-
-import lombok.Getter;
-import lombok.Setter;
-
-import javax.persistence.*;
-import java.util.Set;
-
-@Entity
-@Table(name = "users")
-@Getter
-@Setter
-public class User extends BaseEntity {
-
-    @Column(unique = true, nullable = false)
-    private String username;
-
-    @Column(nullable = false)
-    private String password;
-
-    @OneToMany(mappedBy = "user", fetch = FetchType.LAZY)
-    private Set<Product> products;
-
-    @OneToMany(mappedBy = "user", fetch = FetchType.LAZY)
-    private Set<Meal> meals;
-
-    @OneToMany(mappedBy = "user", fetch = FetchType.LAZY)
-    private Set<PlannedDay> plannedDays;
-}
Index: src/main/java/com/lambakean/rationplanner/representation/dto/form/ScheduleCreationForm.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/dto/form/ScheduleCreationForm.java b/src/main/java/com/lambakean/rationplanner/representation/dto/form/ScheduleCreationForm.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/dto/form/ScheduleCreationForm.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,15 +0,0 @@
-package com.lambakean.rationplanner.representation.dto.form;
-
-import com.lambakean.rationplanner.representation.dto.DateDto;
-import com.lambakean.rationplanner.representation.dto.EntityIdReferenceDto;
-import lombok.Getter;
-import lombok.Setter;
-
-@Getter
-@Setter
-public class ScheduleCreationForm {
-
-    private EntityIdReferenceDto plannedDay;
-    private DateDto startDate;
-    private Integer nextRepeatAfterDays;
-}
Index: src/main/java/com/lambakean/rationplanner/representation/dto/form/MealCreationForm.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/dto/form/MealCreationForm.java b/src/main/java/com/lambakean/rationplanner/representation/dto/form/MealCreationForm.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/dto/form/MealCreationForm.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,38 +0,0 @@
-package com.lambakean.rationplanner.representation.dto.form;
-
-import com.lambakean.rationplanner.representation.dto.EntityIdReferenceDto;
-import com.lambakean.rationplanner.representation.dto.PhotoDto;
-import com.lambakean.rationplanner.representation.dto.TimeDto;
-import lombok.Getter;
-import lombok.Setter;
-
-import java.util.Set;
-
-@Getter
-@Setter
-public class MealCreationForm {
-
-    private String name;
-    private String description;
-    private String recipe;
-    private TimeDto cookingDuration;
-    private Set<IngredientInformation> ingredients;
-    private PhotoDto photo;
-
-    @Getter
-    @Setter
-    public static class IngredientInformation {
-
-        private String name;
-        private EntityIdReferenceDto product;
-        private ProductQuantityInformation productQuantity;
-
-        @Getter
-        @Setter
-        public static class ProductQuantityInformation {
-
-            private Double amount;
-            private EntityIdReferenceDto measurementUnit;
-        }
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/domain/service/PlannedDayService.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/service/PlannedDayService.java b/src/main/java/com/lambakean/rationplanner/domain/service/PlannedDayService.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/service/PlannedDayService.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,16 +0,0 @@
-package com.lambakean.rationplanner.domain.service;
-
-import com.lambakean.rationplanner.data.model.PlannedDay;
-
-import java.util.Set;
-
-public interface PlannedDayService {
-
-    PlannedDay createPlannedDay(PlannedDay plannedDayData);
-
-    PlannedDay getPlannedDayById(String id);
-
-    Set<PlannedDay> getCurrentUserPlannedDays();
-
-    void deletePlannedDayById(String id);
-}
Index: src/main/java/com/lambakean/rationplanner/representation/dto/MealDto.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/dto/MealDto.java b/src/main/java/com/lambakean/rationplanner/representation/dto/MealDto.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/dto/MealDto.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,20 +0,0 @@
-package com.lambakean.rationplanner.representation.dto;
-
-import lombok.Getter;
-import lombok.Setter;
-
-import java.util.Set;
-
-@Getter
-@Setter
-public class MealDto {
-
-    private String id;
-    private String name;
-    private String description;
-    private TimeDto cookingDuration;
-    private String recipe;
-    private Set<IngredientDto> ingredients;
-    private Double price;
-    private PhotoDto photo;
-}
Index: src/main/java/com/lambakean/rationplanner/data/model/BaseEntity.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/data/model/BaseEntity.java b/src/main/java/com/lambakean/rationplanner/data/model/BaseEntity.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/data/model/BaseEntity.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,26 +0,0 @@
-package com.lambakean.rationplanner.data.model;
-
-import lombok.Getter;
-import lombok.Setter;
-import org.hibernate.annotations.GenericGenerator;
-
-import javax.persistence.GeneratedValue;
-import javax.persistence.Id;
-import javax.persistence.MappedSuperclass;
-
-/**
- * Класс, от которого должны наследоваться все сущности, хранимые в базе данных
- */
-@MappedSuperclass
-@Getter
-@Setter
-public class BaseEntity {
-
-    @Id
-    @GeneratedValue(generator = "UUID")
-    @GenericGenerator(
-            name = "UUID",
-            strategy = "org.hibernate.id.UUIDGenerator"
-    )
-    private String id;
-}
Index: src/main/java/com/lambakean/rationplanner/domain/service/impl/ValidationServiceImpl.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/service/impl/ValidationServiceImpl.java b/src/main/java/com/lambakean/rationplanner/domain/service/impl/ValidationServiceImpl.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/service/impl/ValidationServiceImpl.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,32 +0,0 @@
-package com.lambakean.rationplanner.domain.service.impl;
-
-import com.lambakean.rationplanner.domain.exception.InvalidEntityException;
-import com.lambakean.rationplanner.domain.service.ValidationService;
-import org.springframework.stereotype.Service;
-import org.springframework.validation.BindingResult;
-import org.springframework.validation.DataBinder;
-import org.springframework.validation.Validator;
-
-@Service
-public class ValidationServiceImpl implements ValidationService {
-
-    @Override
-    public void validateThrowExceptionIfInvalid(Object target, Validator... validators) {
-
-        BindingResult bindingResult = validate(target, validators);
-
-        if(bindingResult.hasErrors()) {
-            throw new InvalidEntityException(bindingResult);
-        }
-    }
-
-    @Override
-    public BindingResult validate(Object target, Validator... validators) {
-        DataBinder dataBinder = new DataBinder(target);
-        dataBinder.addValidators(validators);
-
-        dataBinder.validate();
-
-        return dataBinder.getBindingResult();
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/domain/service/UserService.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/service/UserService.java b/src/main/java/com/lambakean/rationplanner/domain/service/UserService.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/service/UserService.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,16 +0,0 @@
-package com.lambakean.rationplanner.domain.service;
-
-import com.lambakean.rationplanner.data.model.SecurityTokensHolder;
-import com.lambakean.rationplanner.data.model.User;
-import org.springframework.lang.NonNull;
-
-import javax.servlet.http.HttpServletResponse;
-
-public interface UserService {
-
-    SecurityTokensHolder register(@NonNull User userData, HttpServletResponse httpServletResponse);
-
-    SecurityTokensHolder login(@NonNull User userData, HttpServletResponse httpServletResponse);
-
-    User findById(@NonNull String id);
-}
\ No newline at end of file
Index: src/main/java/com/lambakean/rationplanner/data/model/RefreshTokenWrapper.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/data/model/RefreshTokenWrapper.java b/src/main/java/com/lambakean/rationplanner/data/model/RefreshTokenWrapper.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/data/model/RefreshTokenWrapper.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,35 +0,0 @@
-package com.lambakean.rationplanner.data.model;
-
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-import lombok.NoArgsConstructor;
-import lombok.Setter;
-
-import javax.persistence.*;
-import java.time.ZonedDateTime;
-
-/**
- * Обертка для refresh токенов. Облегчает работу с refresh токенами в коде и позволяет хранить эти токены в базе данных
- */
-@Entity
-@Table(name = "refresh_tokens")
-@NoArgsConstructor
-@AllArgsConstructor
-@Getter
-@Setter
-public class RefreshTokenWrapper extends BaseEntity {
-
-    @Column(nullable = false, unique = true)
-    private String token;
-
-    @ManyToOne
-    @JoinColumn(name = "user_id", nullable = false)
-    private User user;
-
-    @Column(nullable = false)
-    private ZonedDateTime expiresAt;
-
-    public boolean isExpired() {
-        return this.expiresAt.isBefore(ZonedDateTime.now());
-    }
-}
\ No newline at end of file
Index: src/main/java/com/lambakean/rationplanner/representation/controller/MeasurementUnitController.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/controller/MeasurementUnitController.java b/src/main/java/com/lambakean/rationplanner/representation/controller/MeasurementUnitController.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/controller/MeasurementUnitController.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,37 +0,0 @@
-package com.lambakean.rationplanner.representation.controller;
-
-import com.lambakean.rationplanner.representation.dto.MeasurementUnitDto;
-import com.lambakean.rationplanner.domain.mapper.MeasurementUnitMapper;
-import com.lambakean.rationplanner.data.model.MeasurementUnit;
-import com.lambakean.rationplanner.domain.service.MeasurementUnitService;
-import io.swagger.annotations.ApiOperation;
-import lombok.RequiredArgsConstructor;
-import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.GetMapping;
-import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RestController;
-
-import java.util.List;
-import java.util.stream.Collectors;
-
-@RestController
-@RequestMapping("/api/v1/measurementUnit")
-@RequiredArgsConstructor
-public class MeasurementUnitController {
-
-    private final MeasurementUnitService measurementUnitService;
-    private final MeasurementUnitMapper measurementUnitMapper;
-
-    @ApiOperation("Получение списка всех доступных единиц измерения (гр, мл и т.п.)")
-    @GetMapping
-    public ResponseEntity<List<MeasurementUnitDto>> getUnits() {
-
-        List<MeasurementUnit> measurementUnits = measurementUnitService.getUnits();
-
-        return ResponseEntity.ok(
-                measurementUnits.stream()
-                        .map(measurementUnitMapper::toMeasurementUnitDto)
-                        .collect(Collectors.toList())
-        );
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/domain/mapper/PlannedDayMealMapper.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/mapper/PlannedDayMealMapper.java b/src/main/java/com/lambakean/rationplanner/domain/mapper/PlannedDayMealMapper.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/mapper/PlannedDayMealMapper.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,32 +0,0 @@
-package com.lambakean.rationplanner.domain.mapper;
-
-import com.lambakean.rationplanner.data.model.PlannedDayMeal;
-import com.lambakean.rationplanner.representation.dto.PlannedDayMealDto;
-import com.lambakean.rationplanner.representation.dto.TimeDto;
-import com.lambakean.rationplanner.representation.dto.form.PlannedDayCreationForm;
-import org.mapstruct.Mapper;
-import org.springframework.beans.factory.annotation.Autowired;
-
-import java.time.LocalTime;
-import java.util.List;
-
-@Mapper(componentModel = "spring")
-public abstract class PlannedDayMealMapper {
-
-    @Autowired
-    protected DateAndTimeMapper dateAndTimeMapper;
-
-    public abstract List<PlannedDayMeal> toPlannedDayMeals(
-            List<PlannedDayCreationForm.PlannedDayMealInformation> plannedDayMealInformation
-    );
-
-    public abstract List<PlannedDayMealDto> toPlannedDayMealDtos(List<PlannedDayMeal> plannedDayMeals);
-
-    protected LocalTime map(TimeDto timeDto) {
-        return dateAndTimeMapper.toLocalTime(timeDto);
-    }
-
-    protected TimeDto map(LocalTime localTime) {
-        return dateAndTimeMapper.toTimeDto(localTime);
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/domain/mapper/ProductMapper.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/mapper/ProductMapper.java b/src/main/java/com/lambakean/rationplanner/domain/mapper/ProductMapper.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/mapper/ProductMapper.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,14 +0,0 @@
-package com.lambakean.rationplanner.domain.mapper;
-
-import com.lambakean.rationplanner.data.model.Product;
-import com.lambakean.rationplanner.representation.dto.ProductDto;
-import com.lambakean.rationplanner.representation.dto.form.ProductCreationForm;
-import org.mapstruct.Mapper;
-
-@Mapper(componentModel = "spring")
-public interface ProductMapper {
-
-    ProductDto toProductDto(Product product);
-
-    Product toProduct(ProductCreationForm productCreationForm);
-}
Index: src/main/java/com/lambakean/rationplanner/representation/exceptionsHandler/DefaultExceptionsHandler.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/exceptionsHandler/DefaultExceptionsHandler.java b/src/main/java/com/lambakean/rationplanner/representation/exceptionsHandler/DefaultExceptionsHandler.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/exceptionsHandler/DefaultExceptionsHandler.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,52 +0,0 @@
-package com.lambakean.rationplanner.representation.exceptionsHandler;
-
-import com.lambakean.rationplanner.representation.dto.ExceptionDto;
-import com.lambakean.rationplanner.representation.dto.ResponseWithExceptionsDto;
-import com.lambakean.rationplanner.domain.exception.BadRequestException;
-import com.lambakean.rationplanner.domain.exception.FileNotFoundException;
-import org.springframework.http.HttpStatus;
-import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.ControllerAdvice;
-import org.springframework.web.bind.annotation.ExceptionHandler;
-import org.springframework.web.multipart.MaxUploadSizeExceededException;
-
-import java.util.Collections;
-
-@ControllerAdvice
-public class DefaultExceptionsHandler {
-
-    @ExceptionHandler(BadRequestException.class)
-    public ResponseEntity<ResponseWithExceptionsDto> handleBadRequestException(BadRequestException e) {
-
-        ExceptionDto exceptionDto = new ExceptionDto("badRequest", e.getMessage());
-
-        ResponseWithExceptionsDto responseDto = new ResponseWithExceptionsDto();
-        responseDto.setExceptions(Collections.singleton(exceptionDto));
-
-        return new ResponseEntity<>(responseDto, HttpStatus.BAD_REQUEST);
-    }
-
-    @ExceptionHandler(FileNotFoundException.class)
-    public ResponseEntity<ResponseWithExceptionsDto> handleFileNotFoundException(FileNotFoundException e) {
-
-        ExceptionDto exceptionDto = new ExceptionDto("fileNotFound", e.getMessage());
-
-        ResponseWithExceptionsDto responseDto = new ResponseWithExceptionsDto();
-        responseDto.setExceptions(Collections.singleton(exceptionDto));
-
-        return new ResponseEntity<>(responseDto, HttpStatus.NOT_FOUND);
-    }
-
-    @ExceptionHandler(MaxUploadSizeExceededException.class)
-    public ResponseEntity<ResponseWithExceptionsDto> handleFileSizeLimitExceeded(MaxUploadSizeExceededException e) {
-        ExceptionDto exceptionDto = new ExceptionDto(
-                "maxUploadFileSizeExceeded",
-                "Максимальный размер загружаемого файла не должен превышать 8 Мб"
-        );
-
-        ResponseWithExceptionsDto responseDto = new ResponseWithExceptionsDto();
-        responseDto.setExceptions(Collections.singleton(exceptionDto));
-
-        return new ResponseEntity<>(responseDto, HttpStatus.BAD_REQUEST);
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/representation/dto/InvalidFieldExceptionDto.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/dto/InvalidFieldExceptionDto.java b/src/main/java/com/lambakean/rationplanner/representation/dto/InvalidFieldExceptionDto.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/dto/InvalidFieldExceptionDto.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,11 +0,0 @@
-package com.lambakean.rationplanner.representation.dto;
-
-import lombok.Getter;
-import lombok.Setter;
-
-@Getter
-@Setter
-public class InvalidFieldExceptionDto extends ExceptionDto {
-
-    private String field;
-}
Index: src/main/java/com/lambakean/rationplanner/representation/dto/form/UserAuthenticationForm.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/dto/form/UserAuthenticationForm.java b/src/main/java/com/lambakean/rationplanner/representation/dto/form/UserAuthenticationForm.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/dto/form/UserAuthenticationForm.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,12 +0,0 @@
-package com.lambakean.rationplanner.representation.dto.form;
-
-import lombok.Getter;
-import lombok.Setter;
-
-@Getter
-@Setter
-public class UserAuthenticationForm {
-
-    private String username;
-    private String password;
-}
\ No newline at end of file
Index: src/main/java/com/lambakean/rationplanner/data/repository/RefreshTokenWrapperRepository.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/data/repository/RefreshTokenWrapperRepository.java b/src/main/java/com/lambakean/rationplanner/data/repository/RefreshTokenWrapperRepository.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/data/repository/RefreshTokenWrapperRepository.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,13 +0,0 @@
-package com.lambakean.rationplanner.data.repository;
-
-import com.lambakean.rationplanner.data.model.RefreshTokenWrapper;
-import org.springframework.data.jpa.repository.JpaRepository;
-
-import java.util.Optional;
-
-public interface RefreshTokenWrapperRepository extends JpaRepository<RefreshTokenWrapper, String> {
-
-    Optional<RefreshTokenWrapper> findByToken(String token);
-
-    boolean existsByToken(String token);
-}
Index: src/main/java/com/lambakean/rationplanner/domain/validator/ProductValidator.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/validator/ProductValidator.java b/src/main/java/com/lambakean/rationplanner/domain/validator/ProductValidator.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/validator/ProductValidator.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,116 +0,0 @@
-package com.lambakean.rationplanner.domain.validator;
-
-import com.lambakean.rationplanner.data.model.Photo;
-import com.lambakean.rationplanner.data.model.Product;
-import com.lambakean.rationplanner.data.repository.PhotoRepository;
-import lombok.RequiredArgsConstructor;
-import org.springframework.lang.NonNull;
-import org.springframework.stereotype.Component;
-import org.springframework.validation.Errors;
-import org.springframework.validation.Validator;
-
-@Component
-@RequiredArgsConstructor
-public class ProductValidator implements Validator {
-
-    private final PhotoRepository photoRepository;
-
-    @Override
-    public boolean supports(@NonNull Class<?> clazz) {
-        return Product.class.equals(clazz);
-    }
-
-    @Override
-    public void validate(@NonNull Object target, @NonNull Errors errors) {
-
-        Product product = (Product) target;
-
-        validateName(product, errors);
-        validateProducer(product, errors);
-        validatePrice(product, errors);
-        validatePhoto(product, errors);
-    }
-
-    public void validateName(@NonNull Product product, @NonNull Errors errors) {
-
-        String name = product.getName();
-
-        if (name == null) {
-            errors.rejectValue(
-                    "name",
-                    "name.invalid",
-                    "Название продукта не должно быть пустым"
-            );
-            return;
-        }
-
-        if(2 > name.length() || name.length() > 50) {
-            errors.rejectValue(
-                    "name",
-                    "name.invalid",
-                    "Название продукта должно иметь длину от 2 до 50 символов"
-            );
-        }
-    }
-
-    public void validateProducer(@NonNull Product product, @NonNull Errors errors) {
-
-        String producer = product.getProducer();
-
-        if(producer != null) {
-
-            if(1 > producer.length() || producer.length() > 50) {
-                errors.rejectValue(
-                        "producer",
-                        "producer.invalid",
-                        "Имя производителя должно иметь длину от 2 до 50 символов"
-                );
-            }
-        }
-    }
-
-    public void validatePrice(@NonNull Product product, @NonNull Errors errors) {
-
-        Double price = product.getPrice();
-
-        if(price == null) {
-            errors.rejectValue(
-                    "price",
-                    "price.invalid",
-                    "Вы должны указать цену продукта"
-            );
-            return;
-        }
-
-        if(price <= 0) {
-            errors.rejectValue(
-                    "price",
-                    "price.invalid",
-                    "Цена продукта должна быть больше нуля"
-            );
-        }
-    }
-
-    public void validatePhoto(@NonNull Product product, @NonNull Errors errors) {
-
-        Photo photo = product.getPhoto();
-
-        if(photo == null) return;
-
-        if(photo.getId() == null) {
-            errors.rejectValue(
-                    "photo",
-                    "photo.invalid",
-                    "Данные о фотографии продукта заполнены неверно"
-            );
-        }
-
-        if(!photoRepository.existsById(photo.getId())) {
-            errors.rejectValue(
-                    "photo",
-                    "photo.invalid",
-                    String.format("Фотография с id [%s] не существует", photo.getId())
-            );
-        }
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/domain/service/UserSecurityTokensService.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/service/UserSecurityTokensService.java b/src/main/java/com/lambakean/rationplanner/domain/service/UserSecurityTokensService.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/service/UserSecurityTokensService.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,14 +0,0 @@
-package com.lambakean.rationplanner.domain.service;
-
-import com.lambakean.rationplanner.data.model.User;
-import com.lambakean.rationplanner.data.model.AccessTokenWrapper;
-import com.lambakean.rationplanner.data.model.RefreshTokenWrapper;
-
-public interface UserSecurityTokensService {
-
-    RefreshTokenWrapper createRefreshToken(User user);
-
-    AccessTokenWrapper createAccessToken(User user);
-
-
-}
Index: src/main/java/com/lambakean/rationplanner/domain/service/ValidationService.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/service/ValidationService.java b/src/main/java/com/lambakean/rationplanner/domain/service/ValidationService.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/service/ValidationService.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,11 +0,0 @@
-package com.lambakean.rationplanner.domain.service;
-
-import org.springframework.validation.BindingResult;
-import org.springframework.validation.Validator;
-
-public interface ValidationService {
-
-    void validateThrowExceptionIfInvalid(Object target, Validator... validators);
-
-    BindingResult validate(Object target, Validator... validators);
-}
Index: src/main/java/com/lambakean/rationplanner/representation/dto/MeasurementUnitDto.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/dto/MeasurementUnitDto.java b/src/main/java/com/lambakean/rationplanner/representation/dto/MeasurementUnitDto.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/dto/MeasurementUnitDto.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,12 +0,0 @@
-package com.lambakean.rationplanner.representation.dto;
-
-import lombok.Getter;
-import lombok.Setter;
-
-@Getter
-@Setter
-public class MeasurementUnitDto {
-
-    private String id;
-    private String name;
-}
\ No newline at end of file
Index: src/main/java/com/lambakean/rationplanner/domain/service/impl/ProductServiceImpl.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/service/impl/ProductServiceImpl.java b/src/main/java/com/lambakean/rationplanner/domain/service/impl/ProductServiceImpl.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/service/impl/ProductServiceImpl.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,101 +0,0 @@
-package com.lambakean.rationplanner.domain.service.impl;
-
-import com.lambakean.rationplanner.data.model.MeasurementUnit;
-import com.lambakean.rationplanner.data.model.Product;
-import com.lambakean.rationplanner.data.model.ProductQuantity;
-import com.lambakean.rationplanner.data.model.User;
-import com.lambakean.rationplanner.data.repository.MeasurementUnitRepository;
-import com.lambakean.rationplanner.data.repository.ProductRepository;
-import com.lambakean.rationplanner.domain.exception.AccessDeniedException;
-import com.lambakean.rationplanner.domain.exception.BadRequestException;
-import com.lambakean.rationplanner.domain.exception.EntityNotFoundException;
-import com.lambakean.rationplanner.domain.service.PrincipalService;
-import com.lambakean.rationplanner.domain.service.ProductService;
-import com.lambakean.rationplanner.domain.service.ValidationService;
-import lombok.RequiredArgsConstructor;
-import org.springframework.lang.NonNull;
-import org.springframework.stereotype.Service;
-import org.springframework.validation.Validator;
-
-import javax.transaction.Transactional;
-import java.util.List;
-
-@Service
-@RequiredArgsConstructor
-public class ProductServiceImpl implements ProductService {
-
-    private final ProductRepository productRepository;
-    private final MeasurementUnitRepository measurementUnitRepository;
-    private final PrincipalService principalService;
-
-    private final ValidationService validationService;
-    private final Validator productQuantityValidator;
-    private final Validator productValidator;
-
-    @Override
-    public Product getProductById(String id) {
-
-        Product product = productRepository.findById(id).orElseThrow(
-                () -> new EntityNotFoundException(String.format("Продукт с id [%s] не существует", id))
-        );
-
-        User user = principalService.getPrincipal();
-
-        if(!user.getId().equals(product.getUserId())) {
-            throw new AccessDeniedException("Вы не имеете доступа к этому продукту.");
-        }
-
-        return product;
-    }
-
-    @Override
-    @Transactional
-    public List<Product> getCurrentUserProducts() {
-
-        User user = principalService.getPrincipal();
-
-        return productRepository.getAllByUser(user);
-    }
-
-    @Override
-    public Product createProduct(@NonNull Product productData) {
-
-        User user = principalService.getPrincipal();
-
-        String measurementUnitId = productData.getMeasurementUnitId();
-
-        if(measurementUnitId == null) {
-            throw new BadRequestException("Вы не выбрали единицу измерения количества продукта");
-        }
-
-        MeasurementUnit measurementUnit = measurementUnitRepository.findById(measurementUnitId).orElseThrow(
-                () -> new EntityNotFoundException("Вы выбрали невалидную единицу измерения количества продукта")
-        );
-
-        Double productQuantityAmount = productData.getQuantityAmount();
-        ProductQuantity productQuantity = new ProductQuantity(productQuantityAmount, measurementUnit);
-
-        validationService.validateThrowExceptionIfInvalid(productQuantity, productQuantityValidator);
-
-        productData.setUser(user);
-        productData.setQuantity(productQuantity);
-
-        validationService.validateThrowExceptionIfInvalid(productData, productValidator);
-
-        productRepository.saveAndFlush(productData);
-
-        return productData;
-    }
-
-    @Override
-    public void deleteProductById(String id) {
-
-        User user = principalService.getPrincipal();
-
-        if(id == null || !productRepository.existsByIdAndUser(id, user)) {
-            throw new EntityNotFoundException("Неверно указан идентификатор продукта, который вы хотите удалить");
-        }
-
-        productRepository.deleteById(id);
-    }
-}
\ No newline at end of file
Index: src/main/java/com/lambakean/rationplanner/domain/security/JwtAuthenticationFilter.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/security/JwtAuthenticationFilter.java b/src/main/java/com/lambakean/rationplanner/domain/security/JwtAuthenticationFilter.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/security/JwtAuthenticationFilter.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,47 +0,0 @@
-package com.lambakean.rationplanner.domain.security;
-
-import lombok.RequiredArgsConstructor;
-import org.springframework.security.core.Authentication;
-import org.springframework.security.core.AuthenticationException;
-import org.springframework.security.core.context.SecurityContextHolder;
-import org.springframework.web.filter.GenericFilterBean;
-
-import javax.servlet.FilterChain;
-import javax.servlet.ServletException;
-import javax.servlet.ServletRequest;
-import javax.servlet.ServletResponse;
-import javax.servlet.http.HttpServletRequest;
-import java.io.IOException;
-import java.util.Optional;
-
-/**
- * Фильтр навешивает на запрос объект Authentication, если в запросе содержится валидный access токен
- */
-@RequiredArgsConstructor
-public class JwtAuthenticationFilter extends GenericFilterBean {
-
-    private final TokenResolver accessTokenResolver;
-    private final JwtAuthenticationProvider jwtAuthenticationProvider;
-
-    @Override
-    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)
-            throws IOException, ServletException {
-
-        Optional<String> accessTokenOptional = accessTokenResolver.resolveToken((HttpServletRequest) servletRequest);
-
-        if(accessTokenOptional.isPresent()) {
-
-            String accessToken = accessTokenOptional.get();
-
-            try {
-                Authentication authentication = jwtAuthenticationProvider.authenticate(
-                    new UserAuthentication(accessToken)
-                );
-
-                SecurityContextHolder.getContext().setAuthentication(authentication);
-            } catch (AuthenticationException ignored) {}
-        }
-
-        filterChain.doFilter(servletRequest, servletResponse);
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/data/model/Photo.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/data/model/Photo.java b/src/main/java/com/lambakean/rationplanner/data/model/Photo.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/data/model/Photo.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,25 +0,0 @@
-package com.lambakean.rationplanner.data.model;
-
-import lombok.Getter;
-import lombok.Setter;
-
-import javax.persistence.Entity;
-import javax.persistence.Lob;
-import javax.persistence.OneToOne;
-import javax.persistence.Table;
-
-@Entity
-@Table(name = "photos")
-@Getter
-@Setter
-public class Photo extends BaseEntity {
-
-    @Lob
-    private byte[] content;
-
-    @OneToOne(mappedBy = "photo")
-    private Product product;
-
-    @OneToOne(mappedBy = "photo")
-    private Meal meal;
-}
Index: src/main/java/com/lambakean/rationplanner/representation/dto/PlannedDayMealDto.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/dto/PlannedDayMealDto.java b/src/main/java/com/lambakean/rationplanner/representation/dto/PlannedDayMealDto.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/dto/PlannedDayMealDto.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,13 +0,0 @@
-package com.lambakean.rationplanner.representation.dto;
-
-import lombok.Getter;
-import lombok.Setter;
-
-@Getter
-@Setter
-public class PlannedDayMealDto {
-
-    private String id;
-    private EntityIdReferenceDto meal;
-    private TimeDto time;
-}
Index: src/main/java/com/lambakean/rationplanner/representation/controller/PhotoController.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/controller/PhotoController.java b/src/main/java/com/lambakean/rationplanner/representation/controller/PhotoController.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/controller/PhotoController.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,39 +0,0 @@
-package com.lambakean.rationplanner.representation.controller;
-
-import com.lambakean.rationplanner.data.model.Photo;
-import com.lambakean.rationplanner.domain.mapper.PhotoMapper;
-import com.lambakean.rationplanner.domain.service.PhotoService;
-import com.lambakean.rationplanner.representation.dto.PhotoDto;
-import io.swagger.annotations.ApiOperation;
-import lombok.RequiredArgsConstructor;
-import org.springframework.core.io.Resource;
-import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.*;
-import org.springframework.web.multipart.MultipartFile;
-
-@RestController
-@RequestMapping("/api/v1/photo")
-@RequiredArgsConstructor
-public class PhotoController {
-
-    private final PhotoService photoService;
-    private final PhotoMapper photoMapper;
-
-    @ApiOperation("Загрузка изображения на сервер")
-    @PostMapping
-    public ResponseEntity<PhotoDto> uploadPhoto(@RequestParam MultipartFile photo) {
-
-        Photo savedPhoto = photoService.savePhoto(photo);
-
-        return ResponseEntity.ok(photoMapper.toPhotoDto(savedPhoto));
-    }
-
-    @ApiOperation("Получение изображения по его id")
-    @GetMapping("/{id}")
-    public ResponseEntity<Resource> getPhoto(@PathVariable String id) {
-
-        Resource resource = photoService.loadPhoto(id);
-
-        return ResponseEntity.ok(resource);
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/domain/scheduling/RefreshTokenWrappersCleaner.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/scheduling/RefreshTokenWrappersCleaner.java b/src/main/java/com/lambakean/rationplanner/domain/scheduling/RefreshTokenWrappersCleaner.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/scheduling/RefreshTokenWrappersCleaner.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,31 +0,0 @@
-package com.lambakean.rationplanner.domain.scheduling;
-
-import com.lambakean.rationplanner.data.repository.RefreshTokenWrapperRepository;
-import com.lambakean.rationplanner.data.model.RefreshTokenWrapper;
-import lombok.RequiredArgsConstructor;
-import org.springframework.scheduling.annotation.Scheduled;
-import org.springframework.stereotype.Component;
-
-import java.util.List;
-
-@Component
-@RequiredArgsConstructor
-public class RefreshTokenWrappersCleaner {
-
-    private final RefreshTokenWrapperRepository refreshTokenWrapperRepository;
-
-    /**
-     * Удаляет из базы данных просроченные refresh токены
-     */
-    @Scheduled(fixedDelay = 172800000)
-    public void removeExpiredRefreshTokens() {
-
-        List<RefreshTokenWrapper> refreshTokenWrappers = refreshTokenWrapperRepository.findAll();
-
-        for(RefreshTokenWrapper refreshTokenWrapper : refreshTokenWrappers) {
-            if(refreshTokenWrapper.isExpired()) {
-                refreshTokenWrapperRepository.delete(refreshTokenWrapper);
-            }
-        }
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/data/repository/ProductQuantityRepository.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/data/repository/ProductQuantityRepository.java b/src/main/java/com/lambakean/rationplanner/data/repository/ProductQuantityRepository.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/data/repository/ProductQuantityRepository.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,6 +0,0 @@
-package com.lambakean.rationplanner.data.repository;
-
-import com.lambakean.rationplanner.data.model.ProductQuantity;
-import org.springframework.data.jpa.repository.JpaRepository;
-
-public interface ProductQuantityRepository extends JpaRepository<ProductQuantity, String> {}
Index: src/main/java/com/lambakean/rationplanner/data/model/PlannedDay.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/data/model/PlannedDay.java b/src/main/java/com/lambakean/rationplanner/data/model/PlannedDay.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/data/model/PlannedDay.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,53 +0,0 @@
-package com.lambakean.rationplanner.data.model;
-
-import lombok.Getter;
-import lombok.Setter;
-
-import javax.persistence.*;
-import java.util.List;
-import java.util.Set;
-
-@Entity
-@Table(name = "planned_days")
-@Getter
-@Setter
-public class PlannedDay extends BaseEntity {
-
-    @Column(nullable = false)
-    private String name;
-
-    @ManyToOne
-    @JoinColumn(name = "user_id", nullable = false)
-    private User user;
-
-    @OneToMany(mappedBy = "plannedDay", fetch = FetchType.EAGER, cascade = CascadeType.ALL)
-    private List<PlannedDayMeal> plannedDayMeals;
-
-    @OneToMany(mappedBy = "plannedDay", fetch = FetchType.LAZY, cascade = CascadeType.ALL)
-    private Set<Schedule> schedules;
-
-    public Double getPrice() {
-
-        if(plannedDayMeals == null) return 0.0;
-
-        double totalPrice = 0.0;
-
-        for(PlannedDayMeal plannedDayMeal : plannedDayMeals) {
-            totalPrice += plannedDayMeal.getPrice();
-        }
-
-        return totalPrice;
-    }
-
-    public Integer getAmountOfMeals() {
-
-        if(plannedDayMeals == null) return 0;
-        return plannedDayMeals.size();
-    }
-
-    public String getUserId() {
-
-        if(user == null) return null;
-        return user.getId();
-    }
-}
\ No newline at end of file
Index: src/main/java/com/lambakean/rationplanner/data/repository/MeasurementUnitRepository.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/data/repository/MeasurementUnitRepository.java b/src/main/java/com/lambakean/rationplanner/data/repository/MeasurementUnitRepository.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/data/repository/MeasurementUnitRepository.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,6 +0,0 @@
-package com.lambakean.rationplanner.data.repository;
-
-import com.lambakean.rationplanner.data.model.MeasurementUnit;
-import org.springframework.data.jpa.repository.JpaRepository;
-
-public interface MeasurementUnitRepository extends JpaRepository<MeasurementUnit, String> {}
Index: src/main/java/com/lambakean/rationplanner/representation/dto/SecurityTokensHolderDto.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/dto/SecurityTokensHolderDto.java b/src/main/java/com/lambakean/rationplanner/representation/dto/SecurityTokensHolderDto.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/dto/SecurityTokensHolderDto.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,15 +0,0 @@
-package com.lambakean.rationplanner.representation.dto;
-
-import lombok.Getter;
-import lombok.Setter;
-
-import java.time.ZonedDateTime;
-
-@Getter
-@Setter
-public class SecurityTokensHolderDto {
-
-    private String userId;
-    private String accessToken;
-    private ZonedDateTime accessTokenExpiresAt;
-}
Index: src/main/java/com/lambakean/rationplanner/domain/validator/ScheduleValidator.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/validator/ScheduleValidator.java b/src/main/java/com/lambakean/rationplanner/domain/validator/ScheduleValidator.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/validator/ScheduleValidator.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,88 +0,0 @@
-package com.lambakean.rationplanner.domain.validator;
-
-import com.lambakean.rationplanner.data.model.PlannedDay;
-import com.lambakean.rationplanner.data.model.Schedule;
-import com.lambakean.rationplanner.data.repository.PlannedDayRepository;
-import lombok.RequiredArgsConstructor;
-import org.springframework.lang.NonNull;
-import org.springframework.stereotype.Component;
-import org.springframework.validation.Errors;
-import org.springframework.validation.Validator;
-
-import java.time.LocalDate;
-
-@Component
-@RequiredArgsConstructor
-public class ScheduleValidator implements Validator {
-
-    private final PlannedDayRepository plannedDayRepository;
-
-    @Override
-    public boolean supports(@NonNull Class<?> clazz) {
-        return Schedule.class.equals(clazz);
-    }
-
-    @Override
-    public void validate(@NonNull Object target, @NonNull Errors errors) {
-
-        Schedule schedule = (Schedule) target;
-
-        validatePlannedDay(schedule, errors);
-        validateStartDate(schedule, errors);
-        validateNextRepeatAfterDays(schedule, errors);
-    }
-
-    void validatePlannedDay(@NonNull Schedule schedule, @NonNull Errors errors) {
-
-        PlannedDay plannedDay = schedule.getPlannedDay();
-
-        if(plannedDay == null || plannedDay.getId() == null || !plannedDayRepository.existsById(plannedDay.getId())) {
-            errors.rejectValue(
-                    "plannedDay",
-                    "plannedDay.empty",
-                    "День, который нужно вставить в расписание, не выбран, либо выбран неверно"
-            );
-        }
-    }
-
-    void validateStartDate(@NonNull Schedule schedule, @NonNull Errors errors) {
-
-        LocalDate startDate = schedule.getStartDate();
-
-        if(startDate == null) {
-            errors.rejectValue(
-                    "startDate",
-                    "startDate.empty",
-                    "Дата, на которую нужно назначить день, не выбрана, либо выбрана неверно"
-            );
-            return;
-        }
-
-        // -1 день, дабы компенсировать возможное расхождение в датах из-за часового пояса
-        if(startDate.isBefore(LocalDate.now().minusDays(1))) {
-            errors.rejectValue(
-                    "startDate",
-                    "startDay.passed",
-                    "Дата, на которую вы назначили день, уже прошла"
-
-            );
-        }
-    }
-
-    void validateNextRepeatAfterDays(@NonNull Schedule schedule, @NonNull Errors errors) {
-
-        Integer nextRepeatAfterDays = schedule.getNextRepeatAfterDays();
-
-        if(nextRepeatAfterDays == null) {
-            return;
-        }
-
-        if(nextRepeatAfterDays < 1 || nextRepeatAfterDays > 9999) {
-            errors.rejectValue(
-                    "nextRepeatAfterDays",
-                    "nextRepeatAfterDays.invalid",
-                    String.format("Не получится повторять этот день каждые %d дн.", nextRepeatAfterDays)
-            );
-        }
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/domain/service/impl/MeasurementUnitServiceImpl.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/service/impl/MeasurementUnitServiceImpl.java b/src/main/java/com/lambakean/rationplanner/domain/service/impl/MeasurementUnitServiceImpl.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/service/impl/MeasurementUnitServiceImpl.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,21 +0,0 @@
-package com.lambakean.rationplanner.domain.service.impl;
-
-import com.lambakean.rationplanner.data.model.MeasurementUnit;
-import com.lambakean.rationplanner.data.repository.MeasurementUnitRepository;
-import com.lambakean.rationplanner.domain.service.MeasurementUnitService;
-import lombok.RequiredArgsConstructor;
-import org.springframework.stereotype.Service;
-
-import java.util.List;
-
-@Service
-@RequiredArgsConstructor
-public class MeasurementUnitServiceImpl implements MeasurementUnitService {
-
-    private final MeasurementUnitRepository measurementUnitRepository;
-
-    @Override
-    public List<MeasurementUnit> getUnits() {
-        return measurementUnitRepository.findAll();
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/domain/security/filter/CorsFilter.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/security/filter/CorsFilter.java b/src/main/java/com/lambakean/rationplanner/domain/security/filter/CorsFilter.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/security/filter/CorsFilter.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,33 +0,0 @@
-package com.lambakean.rationplanner.domain.security.filter;
-
-import org.springframework.stereotype.Component;
-
-import javax.servlet.*;
-import javax.servlet.http.HttpServletResponse;
-import java.io.IOException;
-
-/**
- * Добавляет к http ответу заголовки, позволяющие использовать CORS
- */
-@Component
-public class CorsFilter implements Filter {
-
-    @Override
-    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)
-            throws IOException, ServletException {
-
-        HttpServletResponse httpServletResponse = (HttpServletResponse) servletResponse;
-
-        httpServletResponse.setHeader("Access-Control-Allow-Origin", "*");
-        httpServletResponse.setHeader(
-                "Access-Control-Allow-Headers",
-                "Origin, X-Requested-With, Content-Type, Accept, Authorization"
-        );
-        httpServletResponse.setHeader(
-                "Access-Control-Allow-Methods",
-                "*"
-        );
-
-        filterChain.doFilter(servletRequest, httpServletResponse);
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/domain/service/impl/UserServiceImpl.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/service/impl/UserServiceImpl.java b/src/main/java/com/lambakean/rationplanner/domain/service/impl/UserServiceImpl.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/service/impl/UserServiceImpl.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,98 +0,0 @@
-package com.lambakean.rationplanner.domain.service.impl;
-
-import com.lambakean.rationplanner.data.model.AccessTokenWrapper;
-import com.lambakean.rationplanner.data.model.RefreshTokenWrapper;
-import com.lambakean.rationplanner.data.model.SecurityTokensHolder;
-import com.lambakean.rationplanner.data.model.User;
-import com.lambakean.rationplanner.data.repository.UserRepository;
-import com.lambakean.rationplanner.domain.exception.AuthenticationException;
-import com.lambakean.rationplanner.domain.exception.EntityNotFoundException;
-import com.lambakean.rationplanner.domain.service.SecurityTokensService;
-import com.lambakean.rationplanner.domain.service.UserService;
-import com.lambakean.rationplanner.domain.service.ValidationService;
-import lombok.RequiredArgsConstructor;
-import org.springframework.lang.NonNull;
-import org.springframework.security.crypto.password.PasswordEncoder;
-import org.springframework.stereotype.Service;
-import org.springframework.validation.Validator;
-
-import javax.servlet.http.Cookie;
-import javax.servlet.http.HttpServletResponse;
-import java.time.ZonedDateTime;
-import java.time.temporal.ChronoUnit;
-
-@Service
-@RequiredArgsConstructor
-public class UserServiceImpl implements UserService {
-
-    private final UserRepository userRepository;
-    private final PasswordEncoder passwordEncoder;
-    private final SecurityTokensService securityTokensService;
-
-    private final ValidationService validationService;
-    private final Validator userValidator;
-    private final Validator userUniquenessValidator;
-
-    @Override
-    public SecurityTokensHolder register(@NonNull User userData,
-                                         HttpServletResponse httpServletResponse) {
-
-
-        validationService.validateThrowExceptionIfInvalid(userData, userValidator, userUniquenessValidator);
-
-        userData.setPassword(passwordEncoder.encode(userData.getPassword()));
-
-        userRepository.saveAndFlush(userData);
-
-        AccessTokenWrapper accessTokenWrapper = securityTokensService.createAccessTokenWrapper(userData);
-        RefreshTokenWrapper refreshTokenWrapper = securityTokensService.createRefreshTokenWrapper(userData);
-
-        securityTokensService.save(refreshTokenWrapper);
-
-        httpServletResponse.addCookie(createRefreshTokenCookie(refreshTokenWrapper));
-
-        return new SecurityTokensHolder(userData, accessTokenWrapper, refreshTokenWrapper);
-    }
-
-    @Override
-    public SecurityTokensHolder login(@NonNull User userData,
-                                      HttpServletResponse httpServletResponse) {
-
-        User user = userRepository.findByUsername(userData.getUsername()).orElseThrow(
-                () -> new AuthenticationException("Пользователя с такими логином и паролем не существует")
-        );
-
-        if(!passwordEncoder.matches(userData.getPassword(), user.getPassword())) {
-            throw new AuthenticationException("Пользователя с такими логином и паролем не существует");
-        }
-
-        AccessTokenWrapper accessTokenWrapper = securityTokensService.createAccessTokenWrapper(user);
-        RefreshTokenWrapper refreshTokenWrapper = securityTokensService.createRefreshTokenWrapper(user);
-
-        securityTokensService.save(refreshTokenWrapper);
-
-        httpServletResponse.addCookie(createRefreshTokenCookie(refreshTokenWrapper));
-
-        return new SecurityTokensHolder(user, accessTokenWrapper, refreshTokenWrapper);
-    }
-
-    public User findById(@NonNull String id) {
-
-        return userRepository.findById(id).orElseThrow(
-                () -> new EntityNotFoundException(String.format("Пользователь с id \"%s\" не найден", id))
-        );
-    }
-
-    private Cookie createRefreshTokenCookie(RefreshTokenWrapper refreshTokenWrapper) {
-
-        long maxAgeInSeconds = ChronoUnit.SECONDS.between(ZonedDateTime.now(), refreshTokenWrapper.getExpiresAt());
-
-        Cookie cookie = new Cookie("refresh_token", refreshTokenWrapper.getToken());
-        cookie.setSecure(false);
-        cookie.setHttpOnly(true);
-        cookie.setPath("/api/v1/user/token");
-        cookie.setMaxAge((int) maxAgeInSeconds);
-
-        return cookie;
-    }
-}
\ No newline at end of file
Index: src/main/java/com/lambakean/rationplanner/data/repository/PlannedDayRepository.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/data/repository/PlannedDayRepository.java b/src/main/java/com/lambakean/rationplanner/data/repository/PlannedDayRepository.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/data/repository/PlannedDayRepository.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,14 +0,0 @@
-package com.lambakean.rationplanner.data.repository;
-
-import com.lambakean.rationplanner.data.model.PlannedDay;
-import com.lambakean.rationplanner.data.model.User;
-import org.springframework.data.jpa.repository.JpaRepository;
-
-import java.util.Set;
-
-public interface PlannedDayRepository extends JpaRepository<PlannedDay, String> {
-
-    Set<PlannedDay> findByUser(User user);
-
-    boolean existsByIdAndUser(String id, User user);
-}
Index: src/main/java/com/lambakean/rationplanner/domain/security/AccessTokenResolver.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/security/AccessTokenResolver.java b/src/main/java/com/lambakean/rationplanner/domain/security/AccessTokenResolver.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/security/AccessTokenResolver.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,22 +0,0 @@
-package com.lambakean.rationplanner.domain.security;
-
-import org.springframework.stereotype.Component;
-
-import javax.servlet.http.HttpServletRequest;
-import java.util.Optional;
-
-@Component
-public class AccessTokenResolver implements TokenResolver {
-
-    @Override
-    public Optional<String> resolveToken(HttpServletRequest httpServletRequest) {
-
-        String bearerToken = httpServletRequest.getHeader("Authorization");
-
-        if (bearerToken != null && bearerToken.startsWith("Bearer ")) {
-            return Optional.of(bearerToken.substring(7));
-        }
-
-        return Optional.empty();
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/data/repository/UserRepository.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/data/repository/UserRepository.java b/src/main/java/com/lambakean/rationplanner/data/repository/UserRepository.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/data/repository/UserRepository.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,13 +0,0 @@
-package com.lambakean.rationplanner.data.repository;
-
-import com.lambakean.rationplanner.data.model.User;
-import org.springframework.data.jpa.repository.JpaRepository;
-
-import java.util.Optional;
-
-public interface UserRepository extends JpaRepository<User, String> {
-
-    Optional<User> findByUsername(String username);
-
-    boolean existsByUsername(String username);
-}
\ No newline at end of file
Index: src/main/java/com/lambakean/rationplanner/representation/exceptionsHandler/UserRelatedExceptionsHandler.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/exceptionsHandler/UserRelatedExceptionsHandler.java b/src/main/java/com/lambakean/rationplanner/representation/exceptionsHandler/UserRelatedExceptionsHandler.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/exceptionsHandler/UserRelatedExceptionsHandler.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,30 +0,0 @@
-package com.lambakean.rationplanner.representation.exceptionsHandler;
-
-import com.lambakean.rationplanner.representation.dto.ResponseWithExceptionsDto;
-import com.lambakean.rationplanner.representation.dto.ExceptionDto;
-import com.lambakean.rationplanner.domain.exception.UserNotLoggedInException;
-import org.springframework.http.HttpStatus;
-import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.ControllerAdvice;
-import org.springframework.web.bind.annotation.ExceptionHandler;
-
-import java.util.HashSet;
-import java.util.Set;
-
-@ControllerAdvice
-public class UserRelatedExceptionsHandler {
-
-    @ExceptionHandler(UserNotLoggedInException.class)
-    public ResponseEntity<ResponseWithExceptionsDto> handleUserNotLoggedInException(UserNotLoggedInException e) {
-
-        ExceptionDto exceptionDto = new ExceptionDto("userNotLoggedIn", e.getMessage());
-
-        Set<ExceptionDto> exceptionDtos = new HashSet<>();
-        exceptionDtos.add(exceptionDto);
-
-        ResponseWithExceptionsDto responseDto = new ResponseWithExceptionsDto();
-        responseDto.setExceptions(exceptionDtos);
-
-        return new ResponseEntity<>(responseDto, HttpStatus.UNAUTHORIZED);
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/representation/dto/PlannedDayDto.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/dto/PlannedDayDto.java b/src/main/java/com/lambakean/rationplanner/representation/dto/PlannedDayDto.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/dto/PlannedDayDto.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,17 +0,0 @@
-package com.lambakean.rationplanner.representation.dto;
-
-import lombok.Getter;
-import lombok.Setter;
-
-import java.util.List;
-
-@Getter
-@Setter
-public class PlannedDayDto {
-
-    private String id;
-    private String name;
-    private Double price;
-    private Integer amountOfMeals;
-    private List<PlannedDayMealDto> plannedDayMeals;
-}
Index: src/main/java/com/lambakean/rationplanner/domain/exception/AuthenticationException.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/exception/AuthenticationException.java b/src/main/java/com/lambakean/rationplanner/domain/exception/AuthenticationException.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/exception/AuthenticationException.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,8 +0,0 @@
-package com.lambakean.rationplanner.domain.exception;
-
-public class AuthenticationException extends RuntimeException {
-
-    public AuthenticationException(String message) {
-        super(message);
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/representation/dto/ExceptionDto.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/dto/ExceptionDto.java b/src/main/java/com/lambakean/rationplanner/representation/dto/ExceptionDto.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/dto/ExceptionDto.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,13 +0,0 @@
-package com.lambakean.rationplanner.representation.dto;
-
-import lombok.*;
-
-@NoArgsConstructor
-@AllArgsConstructor
-@Getter
-@Setter
-public class ExceptionDto {
-
-    private String code;
-    private String message;
-}
\ No newline at end of file
Index: src/main/java/com/lambakean/rationplanner/representation/controller/ScheduleController.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/controller/ScheduleController.java b/src/main/java/com/lambakean/rationplanner/representation/controller/ScheduleController.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/controller/ScheduleController.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,78 +0,0 @@
-package com.lambakean.rationplanner.representation.controller;
-
-import com.lambakean.rationplanner.representation.dto.ScheduleDto;
-import com.lambakean.rationplanner.representation.dto.ScheduledPlannedDayDto;
-import com.lambakean.rationplanner.representation.dto.form.ScheduleCreationForm;
-import com.lambakean.rationplanner.domain.mapper.ScheduleMapper;
-import com.lambakean.rationplanner.domain.mapper.ScheduledPlannedDayMapper;
-import com.lambakean.rationplanner.data.model.Schedule;
-import com.lambakean.rationplanner.domain.service.ScheduleService;
-import io.swagger.annotations.ApiOperation;
-import lombok.RequiredArgsConstructor;
-import org.springframework.format.annotation.DateTimeFormat;
-import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.*;
-
-import java.time.LocalDate;
-import java.util.List;
-import java.util.stream.Collectors;
-
-@RestController
-@RequestMapping("/api/v1/schedule")
-@RequiredArgsConstructor
-public class ScheduleController {
-
-    private final ScheduleService scheduleService;
-    private final ScheduleMapper scheduleMapper;
-    private final ScheduledPlannedDayMapper scheduledPlannedDayMapper;
-
-    @ApiOperation(
-            value = "Добавление нового расписания",
-            notes = "Расписание - это, по сути, план питания на день, который назначается на определённую календарную " +
-                    "дату и который можно сделать повторяемым с определённой периодичностью (например, раз в 7 дней)."
-    )
-    @PostMapping
-    public ResponseEntity<ScheduleDto> createSchedule(@RequestBody ScheduleCreationForm scheduleCreationForm) {
-
-        Schedule createdSchedule = scheduleService.createSchedule(scheduleMapper.toSchedule(scheduleCreationForm));
-
-        return ResponseEntity.ok(scheduleMapper.toScheduleDto(createdSchedule));
-    }
-
-    @ApiOperation(
-            value = "Получение расписания питания текущего пользователя на месяц",
-            notes = "Месяц, для которого будет возвращено расписание, будет определён по дате в параметре date." +
-                    " К какому месяцу будет пренадлежать дата в date, на тот месяц и вернётся расписание."
-    )
-    @GetMapping
-    public ResponseEntity<List<ScheduledPlannedDayDto>> getMonthSchedule(
-            @RequestParam("date") @DateTimeFormat(pattern = "ddMMyyyy") LocalDate date
-    ) {
-
-        return ResponseEntity.ok(
-                scheduleService.getMonthSchedule(date)
-                        .stream()
-                        .map(scheduledPlannedDayMapper::toScheduledPlannedDayDto)
-                        .collect(Collectors.toList())
-        );
-    }
-
-    @ApiOperation("Получение информации о расписании питания по его id")
-    @GetMapping("/{id}")
-    public ResponseEntity<ScheduleDto> getScheduleById(@PathVariable String id) {
-
-        Schedule schedule = scheduleService.getScheduleById(id);
-
-        return ResponseEntity.ok(scheduleMapper.toScheduleDto(schedule));
-    }
-
-    @ApiOperation("Удаление расписания питания по его id")
-    @DeleteMapping("/{id}")
-    public ResponseEntity<Void> deleteScheduleById(@PathVariable String id) {
-
-        this.scheduleService.deleteScheduleById(id);
-
-        return ResponseEntity.noContent().build();
-    }
-}
-
Index: src/main/java/com/lambakean/rationplanner/domain/security/SecurityConfig.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/security/SecurityConfig.java b/src/main/java/com/lambakean/rationplanner/domain/security/SecurityConfig.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/security/SecurityConfig.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,46 +0,0 @@
-package com.lambakean.rationplanner.domain.security;
-
-import lombok.RequiredArgsConstructor;
-import org.springframework.context.annotation.Configuration;
-import org.springframework.http.HttpMethod;
-import org.springframework.security.config.annotation.web.builders.HttpSecurity;
-import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
-import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
-import org.springframework.security.config.http.SessionCreationPolicy;
-import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
-
-import javax.annotation.PostConstruct;
-import javax.servlet.Filter;
-
-@Configuration
-@EnableWebSecurity
-@RequiredArgsConstructor
-public class SecurityConfig extends WebSecurityConfigurerAdapter {
-
-    private final TokenResolver accessTokenResolver;
-    private final JwtAuthenticationProvider jwtAuthenticationProvider;
-
-    private Filter authenticationFilter;
-
-    @PostConstruct
-    private void initializeFilters() {
-        authenticationFilter = new JwtAuthenticationFilter(accessTokenResolver, jwtAuthenticationProvider);
-    }
-
-    @Override
-    protected void configure(HttpSecurity httpSecurity) throws Exception {
-        httpSecurity
-                .authorizeRequests()
-                .antMatchers(HttpMethod.POST, "/api/v1/user/**").permitAll()
-                .antMatchers(
-                        HttpMethod.GET,
-                        "/swagger-ui/**", "/swagger-resources/**", "/v3/api-docs", "/v2/api-docs").permitAll()
-                .anyRequest().authenticated()
-                    .and()
-                .csrf().disable()
-                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
-                    .and()
-                .httpBasic().disable()
-                .addFilterBefore(authenticationFilter, UsernamePasswordAuthenticationFilter.class);
-    }
-}
\ No newline at end of file
Index: src/main/java/com/lambakean/rationplanner/domain/mapper/UserMapper.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/mapper/UserMapper.java b/src/main/java/com/lambakean/rationplanner/domain/mapper/UserMapper.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/mapper/UserMapper.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,14 +0,0 @@
-package com.lambakean.rationplanner.domain.mapper;
-
-import com.lambakean.rationplanner.data.model.User;
-import com.lambakean.rationplanner.representation.dto.UserDto;
-import com.lambakean.rationplanner.representation.dto.form.UserAuthenticationForm;
-import org.mapstruct.Mapper;
-
-@Mapper(componentModel = "spring")
-public interface UserMapper {
-
-    UserDto toUserDto(User user);
-
-    User toUser (UserAuthenticationForm userAuthenticationForm);
-}
Index: src/main/java/com/lambakean/rationplanner/representation/dto/ScheduledPlannedDayDto.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/dto/ScheduledPlannedDayDto.java b/src/main/java/com/lambakean/rationplanner/representation/dto/ScheduledPlannedDayDto.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/dto/ScheduledPlannedDayDto.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,13 +0,0 @@
-package com.lambakean.rationplanner.representation.dto;
-
-import lombok.Getter;
-import lombok.Setter;
-
-@Getter
-@Setter
-public class ScheduledPlannedDayDto {
-
-    private EntityIdReferenceDto schedule;
-    private PlannedDayDto plannedDay;
-    private DateDto date;
-}
\ No newline at end of file
Index: src/main/java/com/lambakean/rationplanner/representation/dto/DateDto.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/dto/DateDto.java b/src/main/java/com/lambakean/rationplanner/representation/dto/DateDto.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/dto/DateDto.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,13 +0,0 @@
-package com.lambakean.rationplanner.representation.dto;
-
-import lombok.Getter;
-import lombok.Setter;
-
-@Getter
-@Setter
-public class DateDto {
-
-    private Integer day;
-    private Integer month;
-    private Integer year;
-}
Index: src/main/java/com/lambakean/rationplanner/representation/exceptionsHandler/RestExceptionsHandler.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/exceptionsHandler/RestExceptionsHandler.java b/src/main/java/com/lambakean/rationplanner/representation/exceptionsHandler/RestExceptionsHandler.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/exceptionsHandler/RestExceptionsHandler.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,33 +0,0 @@
-package com.lambakean.rationplanner.representation.exceptionsHandler;
-
-import com.lambakean.rationplanner.representation.dto.ResponseWithExceptionsDto;
-import com.lambakean.rationplanner.representation.dto.ExceptionDto;
-import org.springframework.http.HttpHeaders;
-import org.springframework.http.HttpStatus;
-import org.springframework.http.ResponseEntity;
-import org.springframework.http.converter.HttpMessageNotReadableException;
-import org.springframework.lang.NonNull;
-import org.springframework.web.bind.annotation.ControllerAdvice;
-import org.springframework.web.context.request.WebRequest;
-import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;
-
-import java.util.Collections;
-
-@ControllerAdvice
-public class RestExceptionsHandler extends ResponseEntityExceptionHandler {
-
-    @Override
-    @NonNull
-    protected ResponseEntity<Object> handleHttpMessageNotReadable(
-            @NonNull HttpMessageNotReadableException ex,
-            @NonNull HttpHeaders headers,
-            @NonNull HttpStatus status,
-            @NonNull WebRequest request) {
-
-        ExceptionDto exceptionDto = new ExceptionDto("invalidRequestBody", "Тело запроса невалидно.");
-
-        ResponseWithExceptionsDto responseDto = new ResponseWithExceptionsDto(Collections.singleton(exceptionDto));
-        return new ResponseEntity<>(responseDto, HttpStatus.BAD_REQUEST);
-
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/domain/service/impl/ScheduleServiceImpl.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/service/impl/ScheduleServiceImpl.java b/src/main/java/com/lambakean/rationplanner/domain/service/impl/ScheduleServiceImpl.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/service/impl/ScheduleServiceImpl.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,128 +0,0 @@
-package com.lambakean.rationplanner.domain.service.impl;
-
-import com.lambakean.rationplanner.data.model.PlannedDay;
-import com.lambakean.rationplanner.data.model.Schedule;
-import com.lambakean.rationplanner.data.model.ScheduledPlannedDay;
-import com.lambakean.rationplanner.data.model.User;
-import com.lambakean.rationplanner.data.repository.PlannedDayRepository;
-import com.lambakean.rationplanner.data.repository.ScheduleRepository;
-import com.lambakean.rationplanner.domain.exception.AccessDeniedException;
-import com.lambakean.rationplanner.domain.exception.EntityNotFoundException;
-import com.lambakean.rationplanner.domain.service.PrincipalService;
-import com.lambakean.rationplanner.domain.service.ScheduleService;
-import com.lambakean.rationplanner.domain.service.ValidationService;
-import com.lambakean.rationplanner.domain.validator.ScheduleValidator;
-import lombok.RequiredArgsConstructor;
-import org.springframework.stereotype.Service;
-
-import javax.transaction.Transactional;
-import java.time.LocalDate;
-import java.time.YearMonth;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Optional;
-import java.util.Set;
-
-@Service
-@RequiredArgsConstructor
-public class ScheduleServiceImpl implements ScheduleService {
-
-    private final PrincipalService principalService;
-    private final ScheduleRepository scheduleRepository;
-    private final PlannedDayRepository plannedDayRepository;
-
-    private final ValidationService validationService;
-    private final ScheduleValidator scheduleValidator;
-
-    @Override
-    public Schedule createSchedule(Schedule scheduleData) {
-
-        User user = principalService.getPrincipal();
-
-        validationService.validateThrowExceptionIfInvalid(scheduleData, scheduleValidator);
-
-        PlannedDay loadedPlannedDayFromDb = plannedDayRepository.findById(scheduleData.getPlannedDayId()).get();
-
-        if(!user.getId().equals(loadedPlannedDayFromDb.getUserId())) {
-            throw new AccessDeniedException(
-                    String.format("Вы не имеете доступа ко дню c id [%s]", scheduleData.getPlannedDayId())
-            );
-        }
-
-        scheduleRepository.saveAndFlush(scheduleData);
-
-        scheduleData.setPlannedDay(loadedPlannedDayFromDb);
-
-        return scheduleData;
-    }
-
-    @Override
-    @Transactional
-    public List<ScheduledPlannedDay> getMonthSchedule(LocalDate date) {
-
-        User user = principalService.getPrincipal();
-
-        Set<Schedule> userSchedules = scheduleRepository.findAllByUser(user);
-
-        List<ScheduledPlannedDay> scheduledPlannedDays = new ArrayList<>();
-
-        for(Schedule schedule : userSchedules) {
-
-            LocalDate currentDate = schedule.getStartDate();
-
-            // пока очередная дата не вышла за пределы месяца, на который нужно сгенерировать расписание
-            while(currentDate.getYear() < date.getYear()
-                    || currentDate.getYear() == date.getYear() && currentDate.getMonthValue() <= date.getMonthValue()) {
-
-                // если очередная дата входит в этот месяц, то сохраняем её в список
-                if(currentDate.getYear() == date.getYear() && currentDate.getMonthValue() == date.getMonthValue()) {
-                    scheduledPlannedDays.add(
-                            new ScheduledPlannedDay(
-                                schedule, schedule.getPlannedDay(), currentDate
-                            )
-                    );
-                }
-
-                int lengthOfCurrentMonth = YearMonth.of(date.getYear(), date.getMonthValue()).lengthOfMonth();
-                currentDate = currentDate.plusDays(
-                        Optional.ofNullable(schedule.getNextRepeatAfterDays()).orElse(lengthOfCurrentMonth)
-                );
-            }
-
-        }
-
-        return scheduledPlannedDays;
-    }
-
-    @Override
-    public Schedule getScheduleById(String id) {
-
-        User user = principalService.getPrincipal();
-
-        Schedule schedule = scheduleRepository.findById(id).orElseThrow(
-                () -> new EntityNotFoundException(String.format("Расписание с id [%s] не найдено", id))
-        );
-
-        if(!schedule.getPlannedDay().getUserId().equals(user.getId())) {
-            throw new AccessDeniedException(String.format("Вы не имеете доступа к расписанию с id [%s]", id));
-        }
-
-        return schedule;
-    }
-
-    @Override
-    public void deleteScheduleById(String id) {
-
-        User user = principalService.getPrincipal();
-
-        Schedule schedule = scheduleRepository.findById(id).orElseThrow(
-                () -> new EntityNotFoundException(String.format("Расписание с id [%s] не найдено", id))
-        );
-
-        if(!schedule.getPlannedDay().getUserId().equals(user.getId())) {
-            throw new AccessDeniedException(String.format("Вы не имеете доступа к расписанию с id [%s]", id));
-        }
-
-        scheduleRepository.deleteById(id);
-    }
-}
\ No newline at end of file
Index: src/main/java/com/lambakean/rationplanner/data/repository/PhotoRepository.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/data/repository/PhotoRepository.java b/src/main/java/com/lambakean/rationplanner/data/repository/PhotoRepository.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/data/repository/PhotoRepository.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,6 +0,0 @@
-package com.lambakean.rationplanner.data.repository;
-
-import com.lambakean.rationplanner.data.model.Photo;
-import org.springframework.data.jpa.repository.JpaRepository;
-
-public interface PhotoRepository extends JpaRepository<Photo, String> {}
Index: src/main/java/com/lambakean/rationplanner/domain/validator/PlannedDayMealValidator.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/validator/PlannedDayMealValidator.java b/src/main/java/com/lambakean/rationplanner/domain/validator/PlannedDayMealValidator.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/validator/PlannedDayMealValidator.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,61 +0,0 @@
-package com.lambakean.rationplanner.domain.validator;
-
-import com.lambakean.rationplanner.data.model.Meal;
-import com.lambakean.rationplanner.data.model.PlannedDayMeal;
-import org.springframework.lang.NonNull;
-import org.springframework.stereotype.Component;
-import org.springframework.validation.Errors;
-import org.springframework.validation.Validator;
-
-@Component
-public class PlannedDayMealValidator implements Validator {
-
-    @Override
-    public boolean supports(@NonNull Class<?> clazz) {
-        return PlannedDayMeal.class.equals(clazz);
-    }
-
-    @Override
-    public void validate(@NonNull Object target, @NonNull Errors errors) {
-
-        PlannedDayMeal plannedDayMeal = (PlannedDayMeal) target;
-
-        validatePlannedDay(plannedDayMeal, errors);
-        validateMeal(plannedDayMeal, errors);
-        validateTime(plannedDayMeal, errors);
-    }
-
-    public void validatePlannedDay(@NonNull PlannedDayMeal plannedDayMeal, @NonNull Errors errors) {
-        if(plannedDayMeal.getPlannedDay() == null) {
-            errors.rejectValue(
-                    "plannedDay",
-                    "plannedDay.empty",
-                    "День, к которому нужно привязать выбранное блюдо, указан неверно"
-            );
-        }
-    }
-
-    public void validateMeal(@NonNull PlannedDayMeal plannedDayMeal, @NonNull Errors errors) {
-
-        Meal meal = plannedDayMeal.getMeal();
-
-        if(meal == null || meal.getId() == null) {
-            errors.rejectValue(
-                    "meal",
-                    "meal.empty",
-                    "Блюдо, которое нужно добавить ко дню, не выбрано или выбрано неверно"
-            );
-        }
-    }
-
-    public void validateTime(@NonNull PlannedDayMeal plannedDayMeal, @NonNull Errors errors) {
-
-        if(plannedDayMeal.getTime() == null) {
-            errors.rejectValue(
-                    "time",
-                    "time.empty",
-                    "Время начала приготовления блюда не выбрано или невалидно"
-            );
-        }
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/representation/controller/UserController.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/controller/UserController.java b/src/main/java/com/lambakean/rationplanner/representation/controller/UserController.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/controller/UserController.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,100 +0,0 @@
-package com.lambakean.rationplanner.representation.controller;
-
-import com.lambakean.rationplanner.data.model.SecurityTokensHolder;
-import com.lambakean.rationplanner.data.model.User;
-import com.lambakean.rationplanner.domain.mapper.SecurityTokensHolderMapper;
-import com.lambakean.rationplanner.domain.mapper.UserMapper;
-import com.lambakean.rationplanner.domain.service.PrincipalService;
-import com.lambakean.rationplanner.domain.service.SecurityTokensService;
-import com.lambakean.rationplanner.domain.service.UserService;
-import com.lambakean.rationplanner.representation.dto.SecurityTokensHolderDto;
-import com.lambakean.rationplanner.representation.dto.UserDto;
-import com.lambakean.rationplanner.representation.dto.form.UserAuthenticationForm;
-import io.swagger.annotations.ApiOperation;
-import lombok.RequiredArgsConstructor;
-import org.springframework.http.HttpStatus;
-import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.*;
-
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
-
-@RestController
-@RequestMapping("/api/v1/user")
-@RequiredArgsConstructor
-public class UserController {
-
-    private final UserService userService;
-    private final PrincipalService principalService;
-    private final SecurityTokensService securityTokensService;
-    private final UserMapper userMapper;
-    private final SecurityTokensHolderMapper securityTokensHolderMapper;
-
-    @ApiOperation(
-            value = "Регистрация пользователя",
-            notes = "При регистрации пользователя также создаётся cookie с refresh токеном."
-    )
-    @PostMapping
-    public ResponseEntity<SecurityTokensHolderDto> register(@RequestBody UserAuthenticationForm userAuthenticationForm,
-                                                            HttpServletResponse httpServletResponse) {
-
-        SecurityTokensHolder securityTokensHolder = userService.register(
-                userMapper.toUser(userAuthenticationForm),
-                httpServletResponse
-        );
-
-        SecurityTokensHolderDto securityTokensHolderDto =
-                securityTokensHolderMapper.toSecurityTokensHolderDto(securityTokensHolder);
-
-        return new ResponseEntity<>(securityTokensHolderDto, HttpStatus.CREATED);
-    }
-
-    @ApiOperation(
-            value = "Вход пользователя в аккаунт",
-            notes = "При входе пользователя в аккаунт также создаётся cookie с refresh токеном."
-    )
-    @PostMapping("/login")
-    public ResponseEntity<SecurityTokensHolderDto> login(@RequestBody UserAuthenticationForm userAuthenticationForm,
-                                                         HttpServletResponse httpServletResponse) {
-
-        SecurityTokensHolder securityTokensHolder = userService.login(
-                userMapper.toUser(userAuthenticationForm),
-                httpServletResponse
-        );
-
-        SecurityTokensHolderDto securityTokensHolderDto =
-                securityTokensHolderMapper.toSecurityTokensHolderDto(securityTokensHolder);
-
-        return ResponseEntity.ok(securityTokensHolderDto);
-    }
-
-    @ApiOperation("Получение информации о залогиненном пользователе")
-    @GetMapping
-    public ResponseEntity<UserDto> getCurrentUser() {
-
-        User user = principalService.getPrincipal();
-        UserDto userDto = userMapper.toUserDto(user);
-
-        return ResponseEntity.ok(userDto);
-    }
-
-    @ApiOperation(
-            value = "Обновление токенов безопасности",
-            notes = "В запросе должен зодержаться cookie файл с валидным refresh токеном." +
-                    " При обновлении токенов создаётся новый cookie с refresh токеном."
-    )
-    @PostMapping("/token")
-    public ResponseEntity<SecurityTokensHolderDto> updateTokens(HttpServletRequest httpServletRequest,
-                                                                HttpServletResponse httpServletResponse) {
-
-        SecurityTokensHolder securityTokensHolder = securityTokensService.updateTokens(
-                httpServletRequest,
-                httpServletResponse
-        );
-
-        SecurityTokensHolderDto securityTokensHolderDto =
-                securityTokensHolderMapper.toSecurityTokensHolderDto(securityTokensHolder);
-
-        return ResponseEntity.ok(securityTokensHolderDto);
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/representation/controller/PlannedDayController.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/controller/PlannedDayController.java b/src/main/java/com/lambakean/rationplanner/representation/controller/PlannedDayController.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/controller/PlannedDayController.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,70 +0,0 @@
-package com.lambakean.rationplanner.representation.controller;
-
-import com.lambakean.rationplanner.representation.dto.PlannedDayDto;
-import com.lambakean.rationplanner.representation.dto.form.PlannedDayCreationForm;
-import com.lambakean.rationplanner.domain.mapper.PlannedDayMapper;
-import com.lambakean.rationplanner.data.model.PlannedDay;
-import com.lambakean.rationplanner.domain.service.PlannedDayService;
-import io.swagger.annotations.ApiOperation;
-import lombok.RequiredArgsConstructor;
-import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.*;
-
-import java.util.Set;
-import java.util.stream.Collectors;
-
-@RestController
-@RequestMapping("/api/v1/plannedDay")
-@RequiredArgsConstructor
-public class PlannedDayController {
-
-    private final PlannedDayService plannedDayService;
-    private final PlannedDayMapper plannedDayMapper;
-
-    @ApiOperation(
-            value = "Создание нового шаблона плана питания на день",
-            notes = "Здесь создаётся не расписание питания, привязанное к конкретной календарной дате, а именно шаблон" +
-                    " плана питания на день. Затем этот шаблон можно будет многоразово использовать, назначая его на" +
-                    " конкретные даты в календаре."
-    )
-    @PostMapping
-    public ResponseEntity<PlannedDayDto> createPlannedDay(@RequestBody PlannedDayCreationForm plannedDayCreationForm) {
-
-        PlannedDay plannedDayData = plannedDayMapper.toPlannedDay(plannedDayCreationForm);
-        PlannedDay createdPlannedDay = plannedDayService.createPlannedDay(plannedDayData);
-
-        return ResponseEntity.ok(plannedDayMapper.toPlannedDayDto(createdPlannedDay));
-    }
-
-    @ApiOperation("Получение информации о шаблоне плана питания на день по его id")
-    @GetMapping("/{id}")
-    public ResponseEntity<PlannedDayDto> getPlannedDayById(@PathVariable String id) {
-
-        PlannedDay plannedDay = plannedDayService.getPlannedDayById(id);
-
-        return ResponseEntity.ok(plannedDayMapper.toPlannedDayDto(plannedDay));
-    }
-
-    @ApiOperation("Получение списка шаблонов планов питания на день текущего пользователя")
-    @GetMapping
-    public ResponseEntity<Set<PlannedDayDto>> getPlannedDays() {
-
-        Set<PlannedDay> plannedDays = plannedDayService.getCurrentUserPlannedDays();
-
-        return ResponseEntity.ok(
-                plannedDays
-                        .stream()
-                        .map(plannedDayMapper::toPlannedDayDto)
-                        .collect(Collectors.toSet())
-        );
-    }
-
-    @ApiOperation("Удаление шаблона плана питания на день по его id")
-    @DeleteMapping("/{id}")
-    public ResponseEntity<Void> deletePlannedDayById(@PathVariable String id) {
-
-        this.plannedDayService.deletePlannedDayById(id);
-
-        return ResponseEntity.noContent().build();
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/domain/validator/IngredientValidator.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/validator/IngredientValidator.java b/src/main/java/com/lambakean/rationplanner/domain/validator/IngredientValidator.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/validator/IngredientValidator.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,68 +0,0 @@
-package com.lambakean.rationplanner.domain.validator;
-
-import com.lambakean.rationplanner.data.model.Ingredient;
-import com.lambakean.rationplanner.data.model.Product;
-import com.lambakean.rationplanner.data.repository.ProductRepository;
-import lombok.RequiredArgsConstructor;
-import org.springframework.lang.NonNull;
-import org.springframework.stereotype.Component;
-import org.springframework.validation.Errors;
-import org.springframework.validation.Validator;
-
-@Component
-@RequiredArgsConstructor
-public class IngredientValidator implements Validator {
-
-    private final ProductRepository productRepository;
-
-    @Override
-    public boolean supports(@NonNull Class<?> clazz) {
-        return Ingredient.class.equals(clazz);
-    }
-
-    @Override
-    public void validate(@NonNull Object target, @NonNull Errors errors) {
-
-        Ingredient ingredient = (Ingredient) target;
-
-        validateName(ingredient, errors);
-        validateProduct(ingredient, errors);
-    }
-
-    public void validateName(@NonNull Ingredient ingredient, @NonNull Errors errors) {
-
-        String name = ingredient.getName();
-
-        if (name == null) {
-            errors.rejectValue(
-                    "name",
-                    "name.invalid",
-                    "Название ингредиента не должно быть пустым"
-            );
-            return;
-        }
-
-        if(name.length() < 2 || name.length() > 50) {
-            errors.rejectValue(
-                    "name",
-                    "name.invalid",
-                    "Название ингредиента должно иметь длину от 2 до 50 символов"
-            );
-        }
-    }
-
-    public void validateProduct(@NonNull Ingredient ingredient, @NonNull Errors errors) {
-
-        Product product = ingredient.getProduct();
-
-        if(product == null) return;
-
-        if(product.getId() == null || !productRepository.existsById(product.getId())) {
-            errors.rejectValue(
-                    "product",
-                    "product.invalid",
-                    "Продукт, выбранный для одного из ингридиентов блюда, не существует"
-            );
-        }
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/representation/controller/ProductController.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/controller/ProductController.java b/src/main/java/com/lambakean/rationplanner/representation/controller/ProductController.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/controller/ProductController.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,65 +0,0 @@
-package com.lambakean.rationplanner.representation.controller;
-
-import com.lambakean.rationplanner.data.model.Product;
-import com.lambakean.rationplanner.domain.mapper.ProductMapper;
-import com.lambakean.rationplanner.domain.service.ProductService;
-import com.lambakean.rationplanner.representation.dto.ProductDto;
-import com.lambakean.rationplanner.representation.dto.form.ProductCreationForm;
-import io.swagger.annotations.ApiOperation;
-import lombok.RequiredArgsConstructor;
-import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.*;
-
-import java.util.List;
-import java.util.stream.Collectors;
-
-@RestController
-@RequestMapping("/api/v1/product")
-@RequiredArgsConstructor
-public class ProductController {
-
-    private final ProductService productService;
-    private final ProductMapper productMapper;
-
-    @ApiOperation("Получение информации о продукте по его id")
-    @GetMapping("/{id}")
-    public ResponseEntity<ProductDto> getProductById(@PathVariable String id) {
-
-        Product product = productService.getProductById(id);
-        ProductDto productDto = productMapper.toProductDto(product);
-
-        return ResponseEntity.ok(productDto);
-    }
-
-    @ApiOperation("Получение списка продуктов текущего пользователя")
-    @GetMapping
-    public ResponseEntity<List<ProductDto>> getProducts() {
-
-        List<Product> products = productService.getCurrentUserProducts();
-        List<ProductDto> productDots = products
-                .stream()
-                .map(productMapper::toProductDto)
-                .collect(Collectors.toList());
-
-        return ResponseEntity.ok(productDots);
-    }
-
-    @ApiOperation("Создание продукта")
-    @PostMapping
-    public ResponseEntity<ProductDto> createProduct(@RequestBody ProductCreationForm productCreationForm) {
-
-        Product product = productService.createProduct(productMapper.toProduct(productCreationForm));
-        ProductDto productDto = productMapper.toProductDto(product);
-
-        return ResponseEntity.ok(productDto);
-    }
-
-    @ApiOperation("Удаление продукта по его id")
-    @DeleteMapping("/{id}")
-    public ResponseEntity<Void> deleteProductById(@PathVariable String id) {
-
-        productService.deleteProductById(id);
-
-        return ResponseEntity.noContent().build();
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/domain/security/RefreshTokenResolver.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/security/RefreshTokenResolver.java b/src/main/java/com/lambakean/rationplanner/domain/security/RefreshTokenResolver.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/security/RefreshTokenResolver.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,27 +0,0 @@
-package com.lambakean.rationplanner.domain.security;
-
-import org.springframework.stereotype.Component;
-
-import javax.servlet.http.Cookie;
-import javax.servlet.http.HttpServletRequest;
-import java.util.Optional;
-
-@Component
-public class RefreshTokenResolver implements TokenResolver {
-
-    @Override
-    public Optional<String> resolveToken(HttpServletRequest httpServletRequest) {
-
-        if(httpServletRequest.getCookies() == null) {
-            return Optional.empty();
-        }
-
-        for(Cookie cookie : httpServletRequest.getCookies()) {
-            if(cookie.getName().equals("refresh_token")) {
-                return Optional.of(cookie.getValue());
-            }
-        }
-
-        return Optional.empty();
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/domain/service/PrincipalService.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/service/PrincipalService.java b/src/main/java/com/lambakean/rationplanner/domain/service/PrincipalService.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/service/PrincipalService.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,8 +0,0 @@
-package com.lambakean.rationplanner.domain.service;
-
-import com.lambakean.rationplanner.data.model.User;
-
-public interface PrincipalService {
-
-    User getPrincipal();
-}
Index: src/main/java/com/lambakean/rationplanner/domain/exception/InvalidEntityException.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/exception/InvalidEntityException.java b/src/main/java/com/lambakean/rationplanner/domain/exception/InvalidEntityException.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/exception/InvalidEntityException.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,12 +0,0 @@
-package com.lambakean.rationplanner.domain.exception;
-
-import lombok.Getter;
-import lombok.RequiredArgsConstructor;
-import org.springframework.validation.BindingResult;
-
-@RequiredArgsConstructor
-@Getter
-public class InvalidEntityException extends RuntimeException {
-
-    private final BindingResult bindingResult;
-}
Index: src/main/java/com/lambakean/rationplanner/domain/security/UserAuthentication.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/security/UserAuthentication.java b/src/main/java/com/lambakean/rationplanner/domain/security/UserAuthentication.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/security/UserAuthentication.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,58 +0,0 @@
-package com.lambakean.rationplanner.domain.security;
-
-import com.lambakean.rationplanner.data.model.User;
-import lombok.RequiredArgsConstructor;
-import org.springframework.security.core.Authentication;
-import org.springframework.security.core.GrantedAuthority;
-
-import java.util.Collection;
-import java.util.Collections;
-
-@RequiredArgsConstructor
-public class UserAuthentication implements Authentication {
-
-    private final String accessToken;
-    private User user;
-
-    private boolean authenticated;
-
-    public UserAuthentication(String accessToken, User user) {
-        this.accessToken = accessToken;
-        this.user = user;
-    }
-
-    @Override
-    public Collection<? extends GrantedAuthority> getAuthorities() {
-        return Collections.emptySet();
-    }
-
-    @Override
-    public String getCredentials() {
-        return accessToken;
-    }
-
-    @Override
-    public Object getDetails() {
-        return user.getUsername();
-    }
-
-    @Override
-    public User getPrincipal() {
-        return user;
-    }
-
-    @Override
-    public boolean isAuthenticated() {
-        return authenticated;
-    }
-
-    @Override
-    public void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException {
-        authenticated = isAuthenticated;
-    }
-
-    @Override
-    public String getName() {
-        return user.getId();
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/data/model/Schedule.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/data/model/Schedule.java b/src/main/java/com/lambakean/rationplanner/data/model/Schedule.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/data/model/Schedule.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,29 +0,0 @@
-package com.lambakean.rationplanner.data.model;
-
-import lombok.Getter;
-import lombok.Setter;
-
-import javax.persistence.*;
-import java.time.LocalDate;
-
-@Entity
-@Table(name = "schedules")
-@Getter
-@Setter
-public class Schedule extends BaseEntity {
-
-    @Column(nullable = false)
-    private LocalDate startDate;
-
-    private Integer nextRepeatAfterDays;
-
-    @ManyToOne
-    @JoinColumn(name = "planned_day_id", nullable = false)
-    private PlannedDay plannedDay;
-
-    public String getPlannedDayId() {
-
-        if(plannedDay == null) return null;
-        return plannedDay.getId();
-    }
-}
\ No newline at end of file
Index: src/main/java/com/lambakean/rationplanner/data/model/MeasurementUnit.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/data/model/MeasurementUnit.java b/src/main/java/com/lambakean/rationplanner/data/model/MeasurementUnit.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/data/model/MeasurementUnit.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,20 +0,0 @@
-package com.lambakean.rationplanner.data.model;
-
-import lombok.Getter;
-import lombok.Setter;
-
-import javax.persistence.*;
-import java.util.Set;
-
-@Entity
-@Table(name = "measurement_units")
-@Getter
-@Setter
-public class MeasurementUnit extends BaseEntity {
-
-    @Column(nullable = false, unique = true)
-    private String name;
-
-    @OneToMany(mappedBy = "measurementUnit", fetch = FetchType.LAZY)
-    private Set<ProductQuantity> relatedQuantities;
-}
\ No newline at end of file
Index: src/main/java/com/lambakean/rationplanner/domain/validator/UserUniquenessValidator.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/validator/UserUniquenessValidator.java b/src/main/java/com/lambakean/rationplanner/domain/validator/UserUniquenessValidator.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/validator/UserUniquenessValidator.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,43 +0,0 @@
-package com.lambakean.rationplanner.domain.validator;
-
-import com.lambakean.rationplanner.data.model.User;
-import com.lambakean.rationplanner.data.repository.UserRepository;
-import lombok.RequiredArgsConstructor;
-import org.springframework.lang.NonNull;
-import org.springframework.stereotype.Component;
-import org.springframework.validation.Errors;
-import org.springframework.validation.Validator;
-
-import java.util.Objects;
-import java.util.Optional;
-
-@Component
-@RequiredArgsConstructor
-public class UserUniquenessValidator implements Validator {
-
-    private final UserRepository userRepository;
-
-    @Override
-    public boolean supports(@NonNull Class<?> clazz) {
-        return User.class.equals(clazz);
-    }
-
-    @Override
-    public void validate(@NonNull Object target, @NonNull Errors errors) {
-        
-        User user = (User) target;
-        String username = user.getUsername();
-
-        if(username == null) return;
-
-        Optional<User> userOptional = userRepository.findByUsername(username);
-
-        if(userOptional.isPresent() && !Objects.equals(userOptional.get().getId(), user.getId())) {
-            errors.rejectValue(
-                    "username",
-                    "username.invalid",
-                    "Пользователь с таким именем уже существует"
-            );
-        }
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/data/repository/MealRepository.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/data/repository/MealRepository.java b/src/main/java/com/lambakean/rationplanner/data/repository/MealRepository.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/data/repository/MealRepository.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,14 +0,0 @@
-package com.lambakean.rationplanner.data.repository;
-
-import com.lambakean.rationplanner.data.model.Meal;
-import com.lambakean.rationplanner.data.model.User;
-import org.springframework.data.jpa.repository.JpaRepository;
-
-import java.util.List;
-
-public interface MealRepository extends JpaRepository<Meal, String> {
-
-    boolean existsByIdAndUser(String id, User user);
-
-    List<Meal> findAllByUser(User user);
-}
Index: src/main/java/com/lambakean/rationplanner/domain/service/MealService.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/service/MealService.java b/src/main/java/com/lambakean/rationplanner/domain/service/MealService.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/service/MealService.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,18 +0,0 @@
-package com.lambakean.rationplanner.domain.service;
-
-import com.lambakean.rationplanner.data.model.Meal;
-
-import java.util.List;
-
-public interface MealService {
-
-    Meal createMeal(Meal mealData);
-
-    Meal getMealById(String id);
-
-    void deleteMealById(String id);
-
-    List<Meal> getCurrentUserMeals();
-
-    boolean belongsTo(String mealId, String userId);
-}
Index: src/main/java/com/lambakean/rationplanner/domain/service/impl/PhotoServiceImpl.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/service/impl/PhotoServiceImpl.java b/src/main/java/com/lambakean/rationplanner/domain/service/impl/PhotoServiceImpl.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/service/impl/PhotoServiceImpl.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,63 +0,0 @@
-package com.lambakean.rationplanner.domain.service.impl;
-
-import com.lambakean.rationplanner.data.model.Photo;
-import com.lambakean.rationplanner.data.repository.PhotoRepository;
-import com.lambakean.rationplanner.domain.exception.BadRequestException;
-import com.lambakean.rationplanner.domain.exception.EntityNotFoundException;
-import com.lambakean.rationplanner.domain.service.PhotoService;
-import lombok.RequiredArgsConstructor;
-import org.springframework.core.io.ByteArrayResource;
-import org.springframework.core.io.Resource;
-import org.springframework.stereotype.Service;
-import org.springframework.web.multipart.MultipartFile;
-
-import javax.transaction.Transactional;
-import java.io.IOException;
-import java.util.HashSet;
-import java.util.Set;
-
-@Service
-@RequiredArgsConstructor
-public class PhotoServiceImpl implements PhotoService {
-
-    private final Set<String> PHOTO_CONTENT_TYPES = new HashSet<>();
-
-    {
-        PHOTO_CONTENT_TYPES.add("image/jpeg");
-        PHOTO_CONTENT_TYPES.add("image/png");
-    }
-
-    private final PhotoRepository photoRepository;
-
-    @Override
-    public Photo savePhoto(MultipartFile multipartFile) {
-
-        if(!PHOTO_CONTENT_TYPES.contains(multipartFile.getContentType())) {
-            throw new BadRequestException("Фотография должна иметь расширение jpg, jpeg, png, jpe или jfif");
-        }
-
-        Photo photo = new Photo();
-        try {
-            photo.setContent(multipartFile.getBytes());
-        } catch (IOException e) {
-            throw new BadRequestException("Фотография, которую вы выбрали, битая");
-        }
-
-        photoRepository.saveAndFlush(photo);
-
-        return photo;
-    }
-
-    @Override
-    @Transactional
-    public Resource loadPhoto(String id) {
-
-        byte[] resource = photoRepository.findById(id)
-                .orElseThrow(
-                        () -> new EntityNotFoundException(String.format("Фотография с id [%s] не найдена", id))
-                )
-                .getContent();
-
-        return new ByteArrayResource(resource);
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/domain/service/impl/PrincipalServiceImpl.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/service/impl/PrincipalServiceImpl.java b/src/main/java/com/lambakean/rationplanner/domain/service/impl/PrincipalServiceImpl.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/service/impl/PrincipalServiceImpl.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,15 +0,0 @@
-package com.lambakean.rationplanner.domain.service.impl;
-
-import com.lambakean.rationplanner.data.model.User;
-import com.lambakean.rationplanner.domain.service.PrincipalService;
-import org.springframework.security.core.context.SecurityContextHolder;
-import org.springframework.stereotype.Service;
-
-@Service
-public class PrincipalServiceImpl implements PrincipalService {
-
-    @Override
-    public User getPrincipal() {
-        return (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/representation/dto/ResponseWithExceptionsDto.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/dto/ResponseWithExceptionsDto.java b/src/main/java/com/lambakean/rationplanner/representation/dto/ResponseWithExceptionsDto.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/dto/ResponseWithExceptionsDto.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,17 +0,0 @@
-package com.lambakean.rationplanner.representation.dto;
-
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-import lombok.NoArgsConstructor;
-import lombok.Setter;
-
-import java.util.Set;
-
-@NoArgsConstructor
-@AllArgsConstructor
-@Getter
-@Setter
-public class ResponseWithExceptionsDto {
-
-    private Set<? extends ExceptionDto> exceptions;
-}
Index: src/main/java/com/lambakean/rationplanner/domain/security/TokenResolver.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/security/TokenResolver.java b/src/main/java/com/lambakean/rationplanner/domain/security/TokenResolver.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/security/TokenResolver.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,9 +0,0 @@
-package com.lambakean.rationplanner.domain.security;
-
-import javax.servlet.http.HttpServletRequest;
-import java.util.Optional;
-
-public interface TokenResolver {
-
-    Optional<String> resolveToken(HttpServletRequest httpServletRequest);
-}
Index: src/main/java/com/lambakean/rationplanner/representation/exceptionsHandler/EntityRelatedExceptionsHandler.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/exceptionsHandler/EntityRelatedExceptionsHandler.java b/src/main/java/com/lambakean/rationplanner/representation/exceptionsHandler/EntityRelatedExceptionsHandler.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/exceptionsHandler/EntityRelatedExceptionsHandler.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,70 +0,0 @@
-package com.lambakean.rationplanner.representation.exceptionsHandler;
-
-import com.lambakean.rationplanner.representation.dto.InvalidFieldExceptionDto;
-import com.lambakean.rationplanner.representation.dto.ResponseWithExceptionsDto;
-import com.lambakean.rationplanner.representation.dto.ExceptionDto;
-import com.lambakean.rationplanner.domain.exception.AccessDeniedException;
-import com.lambakean.rationplanner.domain.exception.EntityNotFoundException;
-import com.lambakean.rationplanner.domain.exception.InvalidEntityException;
-import org.springframework.http.HttpStatus;
-import org.springframework.http.ResponseEntity;
-import org.springframework.validation.BindingResult;
-import org.springframework.validation.FieldError;
-import org.springframework.web.bind.annotation.ControllerAdvice;
-import org.springframework.web.bind.annotation.ExceptionHandler;
-
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Set;
-
-@ControllerAdvice
-public class EntityRelatedExceptionsHandler {
-
-    @ExceptionHandler(EntityNotFoundException.class)
-    public ResponseEntity<ResponseWithExceptionsDto> handleEntityNotFoundException(EntityNotFoundException e) {
-
-        ExceptionDto exceptionDto = new ExceptionDto("entityNotFound", e.getMessage());
-
-        ResponseWithExceptionsDto responseDto = new ResponseWithExceptionsDto();
-        responseDto.setExceptions(Collections.singleton(exceptionDto));
-
-        return new ResponseEntity<>(responseDto, HttpStatus.NOT_FOUND);
-    }
-
-    @ExceptionHandler(InvalidEntityException.class)
-    public ResponseEntity<ResponseWithExceptionsDto> handleInvalidEntityException(InvalidEntityException e) {
-
-        Set<InvalidFieldExceptionDto> exceptionDtos = new HashSet<>();
-
-        BindingResult entityBindingResult = e.getBindingResult();
-
-        for(FieldError fieldError : entityBindingResult.getFieldErrors()) {
-
-            InvalidFieldExceptionDto exceptionDto = new InvalidFieldExceptionDto();
-
-            exceptionDto.setCode("invalidField");
-            exceptionDto.setField(fieldError.getField());
-            exceptionDto.setMessage(fieldError.getDefaultMessage());
-
-            exceptionDtos.add(exceptionDto);
-        }
-
-        ResponseWithExceptionsDto responseDto = new ResponseWithExceptionsDto(exceptionDtos);
-        return new ResponseEntity<>(responseDto, HttpStatus.BAD_REQUEST);
-    }
-
-    @ExceptionHandler(AccessDeniedException.class)
-    public ResponseEntity<ResponseWithExceptionsDto> handleAccessDeniedException(AccessDeniedException e) {
-
-        ExceptionDto exceptionDto = new ExceptionDto("accessDenied", e.getMessage());
-
-        Set<ExceptionDto> exceptionDtos = new HashSet<>();
-        exceptionDtos.add(exceptionDto);
-
-        ResponseWithExceptionsDto responseDto = new ResponseWithExceptionsDto();
-        responseDto.setExceptions(exceptionDtos);
-
-        return new ResponseEntity<>(responseDto, HttpStatus.FORBIDDEN);
-
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/domain/service/ScheduleService.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/service/ScheduleService.java b/src/main/java/com/lambakean/rationplanner/domain/service/ScheduleService.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/service/ScheduleService.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,18 +0,0 @@
-package com.lambakean.rationplanner.domain.service;
-
-import com.lambakean.rationplanner.data.model.Schedule;
-import com.lambakean.rationplanner.data.model.ScheduledPlannedDay;
-
-import java.time.LocalDate;
-import java.util.List;
-
-public interface ScheduleService {
-
-    Schedule createSchedule(Schedule scheduleData);
-
-    List<ScheduledPlannedDay> getMonthSchedule(LocalDate date);
-
-    Schedule getScheduleById(String id);
-
-    void deleteScheduleById(String id);
-}
Index: src/main/java/com/lambakean/rationplanner/domain/mapper/SecurityTokensHolderMapper.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/mapper/SecurityTokensHolderMapper.java b/src/main/java/com/lambakean/rationplanner/domain/mapper/SecurityTokensHolderMapper.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/mapper/SecurityTokensHolderMapper.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,11 +0,0 @@
-package com.lambakean.rationplanner.domain.mapper;
-
-import com.lambakean.rationplanner.data.model.SecurityTokensHolder;
-import com.lambakean.rationplanner.representation.dto.SecurityTokensHolderDto;
-import org.mapstruct.Mapper;
-
-@Mapper(componentModel = "spring")
-public interface SecurityTokensHolderMapper {
-
-    SecurityTokensHolderDto toSecurityTokensHolderDto(SecurityTokensHolder securityTokensHolder);
-}
Index: src/main/java/com/lambakean/rationplanner/domain/validator/UserValidator.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/validator/UserValidator.java b/src/main/java/com/lambakean/rationplanner/domain/validator/UserValidator.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/validator/UserValidator.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,96 +0,0 @@
-package com.lambakean.rationplanner.domain.validator;
-
-import com.lambakean.rationplanner.data.model.User;
-import org.springframework.lang.NonNull;
-import org.springframework.stereotype.Component;
-import org.springframework.validation.Errors;
-import org.springframework.validation.Validator;
-
-@Component
-public class UserValidator implements Validator {
-
-    @Override
-    public boolean supports(@NonNull Class<?> clazz) {
-        return User.class.equals(clazz);
-    }
-
-    @Override
-    public void validate(@NonNull Object target, @NonNull Errors errors) {
-
-        User user = (User) target;
-
-        validateUsername(user, errors);
-        validatePassword(user, errors);
-    }
-
-    public void validateUsername(@NonNull User user, @NonNull Errors errors) {
-
-        String username = user.getUsername();
-
-        if (username == null) {
-            errors.rejectValue(
-                    "username",
-                    "username.invalid",
-                    "Имя пользователя не должно быть пустым"
-            );
-            return;
-        }
-
-        if(4 > username.length() || username.length() > 20) {
-            errors.rejectValue(
-                    "username",
-                    "username.invalid",
-                    "Имя пользователя должно иметь длину от 4 до 20 символов"
-            );
-            return;
-        }
-
-        if(username.startsWith("_") || username.startsWith(".") || username.endsWith("_") || username.endsWith(".")) {
-            errors.rejectValue(
-                    "username",
-                    "username.invalid",
-                    "Символы \".\" или \"_\" не должны находиться в начале или в конце имени пользователя"
-            );
-        }
-
-        if(username.contains("__") || username.contains("_.") || username.contains("._") || username.contains("..")) {
-            errors.rejectValue(
-                    "username",
-                    "username.invalid",
-                    "Имя пользователя не должно содержать пары символов \"__\", \"_.\", \"._\" или \"..\""
-            );
-        }
-
-        for(char c : username.toCharArray()) {
-            if(!Character.isLetterOrDigit(c) && c != '_' && c != '.') {
-                errors.rejectValue(
-                        "username",
-                        "username.invalid",
-                        "Имя пользователя должно состоять только из букв, цифр и символов \".\" и \"-\""
-                );
-            }
-        }
-    }
-
-    public void validatePassword(@NonNull User user, @NonNull Errors errors) {
-
-        String password = user.getPassword();
-
-        if(password == null) {
-            errors.rejectValue(
-                    "password",
-                    "password.invalid",
-                    "Пароль не должен быть пустым"
-            );
-            return;
-        }
-
-        if(8 > password.length() || password.length() > 60) {
-            errors.rejectValue(
-                    "password",
-                    "password.invalid",
-                    "Пароль должен иметь длину от 8 до 60 символов"
-            );
-        }
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/representation/dto/form/ProductCreationForm.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/dto/form/ProductCreationForm.java b/src/main/java/com/lambakean/rationplanner/representation/dto/form/ProductCreationForm.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/dto/form/ProductCreationForm.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,25 +0,0 @@
-package com.lambakean.rationplanner.representation.dto.form;
-
-import com.lambakean.rationplanner.representation.dto.EntityIdReferenceDto;
-import com.lambakean.rationplanner.representation.dto.PhotoDto;
-import lombok.Getter;
-import lombok.Setter;
-
-@Getter
-@Setter
-public class ProductCreationForm {
-
-    private String name;
-    private String producer;
-    private ProductQuantityInformation quantity;
-    private Double price;
-    private PhotoDto photo;
-
-    @Getter
-    @Setter
-    public static class ProductQuantityInformation {
-
-        private Double amount;
-        private EntityIdReferenceDto measurementUnit;
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/domain/validator/PlannedDayValidator.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/validator/PlannedDayValidator.java b/src/main/java/com/lambakean/rationplanner/domain/validator/PlannedDayValidator.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/validator/PlannedDayValidator.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,46 +0,0 @@
-package com.lambakean.rationplanner.domain.validator;
-
-import com.lambakean.rationplanner.data.model.PlannedDay;
-import org.springframework.lang.NonNull;
-import org.springframework.stereotype.Component;
-import org.springframework.validation.Errors;
-import org.springframework.validation.Validator;
-
-@Component
-public class PlannedDayValidator implements Validator {
-
-    @Override
-    public boolean supports(@NonNull Class<?> clazz) {
-        return PlannedDay.class.equals(clazz);
-    }
-
-    @Override
-    public void validate(@NonNull Object target, @NonNull Errors errors) {
-
-        PlannedDay plannedDay = (PlannedDay) target;
-
-        validateName(plannedDay, errors);
-    }
-
-    public void validateName(@NonNull PlannedDay plannedDay, @NonNull Errors errors) {
-
-        String name = plannedDay.getName();
-
-        if (name == null || name.equals("")) {
-            errors.rejectValue(
-                    "name",
-                    "name.invalid",
-                    "Название дня не должно быть пустым"
-            );
-            return;
-        }
-
-        if(2 > name.length() || name.length() > 50) {
-            errors.rejectValue(
-                    "name",
-                    "name.invalid",
-                    "Название дня должно иметь длину от 2 до 50 символов"
-            );
-        }
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/domain/mapper/PlannedDayMapper.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/mapper/PlannedDayMapper.java b/src/main/java/com/lambakean/rationplanner/domain/mapper/PlannedDayMapper.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/mapper/PlannedDayMapper.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,27 +0,0 @@
-package com.lambakean.rationplanner.domain.mapper;
-
-import com.lambakean.rationplanner.data.model.PlannedDay;
-import com.lambakean.rationplanner.representation.dto.PlannedDayDto;
-import com.lambakean.rationplanner.representation.dto.form.PlannedDayCreationForm;
-import org.mapstruct.Mapper;
-import org.mapstruct.Mapping;
-import org.springframework.beans.factory.annotation.Autowired;
-
-@Mapper(componentModel = "spring")
-public abstract class PlannedDayMapper {
-
-    @Autowired
-    protected PlannedDayMealMapper plannedDayMealMapper;
-
-    @Mapping(
-            target = "plannedDayMeals",
-            expression = "java(plannedDayMealMapper.toPlannedDayMeals(plannedDayCreationForm.getPlannedDayMeals()))"
-    )
-    public abstract PlannedDay toPlannedDay(PlannedDayCreationForm plannedDayCreationForm);
-
-    @Mapping(
-            target = "plannedDayMeals",
-            expression = "java(plannedDayMealMapper.toPlannedDayMealDtos(plannedDay.getPlannedDayMeals()))"
-    )
-    public abstract PlannedDayDto toPlannedDayDto(PlannedDay plannedDay);
-}
Index: src/main/java/com/lambakean/rationplanner/domain/service/SecurityTokensService.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/service/SecurityTokensService.java b/src/main/java/com/lambakean/rationplanner/domain/service/SecurityTokensService.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/service/SecurityTokensService.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,20 +0,0 @@
-package com.lambakean.rationplanner.domain.service;
-
-import com.lambakean.rationplanner.data.model.SecurityTokensHolder;
-import com.lambakean.rationplanner.data.model.User;
-import com.lambakean.rationplanner.data.model.AccessTokenWrapper;
-import com.lambakean.rationplanner.data.model.RefreshTokenWrapper;
-
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
-
-public interface SecurityTokensService {
-
-    RefreshTokenWrapper createRefreshTokenWrapper(User user);
-
-    AccessTokenWrapper createAccessTokenWrapper(User user);
-
-    void save(RefreshTokenWrapper refreshTokenWrapper);
-
-    SecurityTokensHolder updateTokens(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse);
-}
Index: src/main/java/com/lambakean/rationplanner/domain/mapper/DateAndTimeMapperImpl.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/mapper/DateAndTimeMapperImpl.java b/src/main/java/com/lambakean/rationplanner/domain/mapper/DateAndTimeMapperImpl.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/mapper/DateAndTimeMapperImpl.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,92 +0,0 @@
-package com.lambakean.rationplanner.domain.mapper;
-
-import com.lambakean.rationplanner.representation.dto.DateDto;
-import com.lambakean.rationplanner.representation.dto.TimeDto;
-import org.springframework.stereotype.Component;
-
-import java.time.DateTimeException;
-import java.time.Duration;
-import java.time.LocalDate;
-import java.time.LocalTime;
-
-@Component
-public class DateAndTimeMapperImpl implements DateAndTimeMapper {
-
-    @Override
-    public Duration toDuration(TimeDto timeDto) {
-
-        if(timeDto == null) return null;
-
-        int durationInMinutes = 0;
-
-        if(timeDto.getHours() != null) {
-            durationInMinutes += timeDto.getHours() * 60;
-        }
-
-        if(timeDto.getMinutes() != null) {
-            durationInMinutes += timeDto.getMinutes();
-        }
-
-        return Duration.ofMinutes(durationInMinutes);
-    }
-
-    @Override
-    public TimeDto toTimeDto(Duration duration) {
-
-        if(duration == null) return null;
-
-        TimeDto timeDto = new TimeDto();
-
-        timeDto.setHours((int) duration.toHours());
-        timeDto.setMinutes((int) duration.toMinutes() % 60);
-
-        return timeDto;
-    }
-
-    @Override
-    public LocalTime toLocalTime(TimeDto timeDto) {
-
-        if(timeDto == null) return null;
-
-        if(0 > timeDto.getHours() || timeDto.getHours() > 23
-                || 0 > timeDto.getMinutes() || timeDto.getMinutes() > 59) {
-            return null;
-        }
-
-        return LocalTime.of(timeDto.getHours(), timeDto.getMinutes());
-    }
-
-    @Override
-    public TimeDto toTimeDto(LocalTime localTime) {
-
-        if(localTime == null) return null;
-
-        return new TimeDto(localTime.getHour(), localTime.getMinute());
-    }
-
-    @Override
-    public LocalDate toLocalDate(DateDto dateDto) {
-
-        if(dateDto == null) {
-            return null;
-        }
-
-        try {
-            return LocalDate.of(dateDto.getYear(), dateDto.getMonth(), dateDto.getDay());
-        } catch (DateTimeException e) {
-            return null;
-        }
-    }
-
-    @Override
-    public DateDto toDateDto(LocalDate localDate) {
-
-        DateDto dateDto = new DateDto();
-
-        dateDto.setYear(localDate.getYear());
-        dateDto.setMonth(localDate.getMonthValue());
-        dateDto.setDay(localDate.getDayOfMonth());
-
-        return dateDto;
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/representation/dto/ProductQuantityDto.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/dto/ProductQuantityDto.java b/src/main/java/com/lambakean/rationplanner/representation/dto/ProductQuantityDto.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/dto/ProductQuantityDto.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,13 +0,0 @@
-package com.lambakean.rationplanner.representation.dto;
-
-import lombok.Getter;
-import lombok.Setter;
-
-@Getter
-@Setter
-public class ProductQuantityDto {
-
-    private String id;
-    private Double amount;
-    private MeasurementUnitDto measurementUnit;
-}
Index: src/main/java/com/lambakean/rationplanner/domain/mapper/MeasurementUnitMapper.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/mapper/MeasurementUnitMapper.java b/src/main/java/com/lambakean/rationplanner/domain/mapper/MeasurementUnitMapper.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/mapper/MeasurementUnitMapper.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,11 +0,0 @@
-package com.lambakean.rationplanner.domain.mapper;
-
-import com.lambakean.rationplanner.data.model.MeasurementUnit;
-import com.lambakean.rationplanner.representation.dto.MeasurementUnitDto;
-import org.mapstruct.Mapper;
-
-@Mapper(componentModel = "spring")
-public interface MeasurementUnitMapper {
-
-    MeasurementUnitDto toMeasurementUnitDto(MeasurementUnit measurementUnit);
-}
Index: src/main/java/com/lambakean/rationplanner/representation/dto/UserDto.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/dto/UserDto.java b/src/main/java/com/lambakean/rationplanner/representation/dto/UserDto.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/dto/UserDto.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,16 +0,0 @@
-package com.lambakean.rationplanner.representation.dto;
-
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-import lombok.NoArgsConstructor;
-import lombok.Setter;
-
-@NoArgsConstructor
-@AllArgsConstructor
-@Getter
-@Setter
-public class UserDto {
-
-    private String id;
-    private String username;
-}
Index: src/main/java/com/lambakean/rationplanner/domain/service/PhotoService.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/service/PhotoService.java b/src/main/java/com/lambakean/rationplanner/domain/service/PhotoService.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/service/PhotoService.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,12 +0,0 @@
-package com.lambakean.rationplanner.domain.service;
-
-import com.lambakean.rationplanner.data.model.Photo;
-import org.springframework.core.io.Resource;
-import org.springframework.web.multipart.MultipartFile;
-
-public interface PhotoService {
-
-    Photo savePhoto(MultipartFile multipartFile);
-
-    Resource loadPhoto(String filename);
-}
Index: src/main/java/com/lambakean/rationplanner/domain/mapper/MealMapper.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/mapper/MealMapper.java b/src/main/java/com/lambakean/rationplanner/domain/mapper/MealMapper.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/mapper/MealMapper.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,30 +0,0 @@
-package com.lambakean.rationplanner.domain.mapper;
-
-import com.lambakean.rationplanner.data.model.Meal;
-import com.lambakean.rationplanner.representation.dto.MealDto;
-import com.lambakean.rationplanner.representation.dto.TimeDto;
-import com.lambakean.rationplanner.representation.dto.form.MealCreationForm;
-import org.mapstruct.Mapper;
-import org.springframework.beans.factory.annotation.Autowired;
-
-import java.time.Duration;
-
-@Mapper(componentModel = "spring")
-public abstract class MealMapper {
-
-    @Autowired
-    protected DateAndTimeMapper dateAndTimeMapper;
-
-    public abstract Meal toMeal(MealCreationForm mealCreationForm);
-
-    public abstract MealDto toMealDto(Meal meal);
-
-
-    protected Duration map(TimeDto timeDto) {
-        return dateAndTimeMapper.toDuration(timeDto);
-    }
-
-    protected TimeDto map(Duration duration) {
-        return dateAndTimeMapper.toTimeDto(duration);
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/representation/exceptionsHandler/SecurityRelatedExceptionsHandler.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/exceptionsHandler/SecurityRelatedExceptionsHandler.java b/src/main/java/com/lambakean/rationplanner/representation/exceptionsHandler/SecurityRelatedExceptionsHandler.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/exceptionsHandler/SecurityRelatedExceptionsHandler.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,26 +0,0 @@
-package com.lambakean.rationplanner.representation.exceptionsHandler;
-
-import com.lambakean.rationplanner.representation.dto.ResponseWithExceptionsDto;
-import com.lambakean.rationplanner.representation.dto.ExceptionDto;
-import com.lambakean.rationplanner.domain.exception.AuthenticationException;
-import org.springframework.http.HttpStatus;
-import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.ControllerAdvice;
-import org.springframework.web.bind.annotation.ExceptionHandler;
-
-import java.util.Collections;
-
-@ControllerAdvice
-public class SecurityRelatedExceptionsHandler {
-
-    @ExceptionHandler(AuthenticationException.class)
-    public ResponseEntity<ResponseWithExceptionsDto> handleAuthenticationException(AuthenticationException e) {
-
-        ExceptionDto exceptionDto = new ExceptionDto("authenticationException", e.getMessage());
-
-        ResponseWithExceptionsDto responseDto = new ResponseWithExceptionsDto();
-        responseDto.setExceptions(Collections.singleton(exceptionDto));
-
-        return new ResponseEntity<>(responseDto, HttpStatus.UNAUTHORIZED);
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/domain/security/JwtAuthenticationProvider.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/security/JwtAuthenticationProvider.java b/src/main/java/com/lambakean/rationplanner/domain/security/JwtAuthenticationProvider.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/security/JwtAuthenticationProvider.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,53 +0,0 @@
-package com.lambakean.rationplanner.domain.security;
-
-import com.lambakean.rationplanner.data.model.User;
-import com.lambakean.rationplanner.domain.exception.EntityNotFoundException;
-import com.lambakean.rationplanner.domain.service.UserService;
-import lombok.RequiredArgsConstructor;
-import org.springframework.lang.NonNull;
-import org.springframework.security.authentication.AuthenticationProvider;
-import org.springframework.security.authentication.BadCredentialsException;
-import org.springframework.security.core.Authentication;
-import org.springframework.security.core.AuthenticationException;
-import org.springframework.stereotype.Component;
-
-@Component
-@RequiredArgsConstructor
-public class JwtAuthenticationProvider implements AuthenticationProvider {
-
-    private final JwtTokenProvider jwtTokenProvider;
-    private final UserService userService;
-
-    @Override
-    public Authentication authenticate(@NonNull Authentication authentication) throws AuthenticationException {
-
-        String token = authentication.getCredentials().toString();
-
-        if(jwtTokenProvider.validateToken(token)) {
-
-            String userId = jwtTokenProvider.getSubject(token);
-
-            User user;
-
-            try {
-                user = userService.findById(userId);
-            } catch (EntityNotFoundException e) {
-                throw new BadCredentialsException(e.getMessage());
-            }
-
-            UserAuthentication userAuthentication = new UserAuthentication(token, user);
-            userAuthentication.setAuthenticated(true);
-
-            return userAuthentication;
-
-        } else {
-            throw new BadCredentialsException(String.format("The access token [%s] is invalid", token));
-        }
-
-    }
-
-    @Override
-    public boolean supports(Class<?> authenticationClass) {
-        return UserAuthentication.class.equals(authenticationClass);
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/data/model/SecurityTokensHolder.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/data/model/SecurityTokensHolder.java b/src/main/java/com/lambakean/rationplanner/data/model/SecurityTokensHolder.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/data/model/SecurityTokensHolder.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,38 +0,0 @@
-package com.lambakean.rationplanner.data.model;
-
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-import lombok.NoArgsConstructor;
-import lombok.Setter;
-
-import java.time.ZonedDateTime;
-
-@NoArgsConstructor
-@AllArgsConstructor
-@Getter
-@Setter
-public class SecurityTokensHolder {
-
-    private User user;
-
-    private AccessTokenWrapper accessTokenWrapper;
-    private RefreshTokenWrapper refreshTokenWrapper;
-
-    public String getUserId() {
-
-        if(user == null) return null;
-        return user.getId();
-    }
-
-    public String getAccessToken() {
-
-        if(accessTokenWrapper == null) return null;
-        return accessTokenWrapper.getToken();
-    }
-
-    public ZonedDateTime getAccessTokenExpiresAt() {
-
-        if(accessTokenWrapper == null) return null;
-        return accessTokenWrapper.getExpiresAt();
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/domain/exception/UserNotLoggedInException.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/exception/UserNotLoggedInException.java b/src/main/java/com/lambakean/rationplanner/domain/exception/UserNotLoggedInException.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/exception/UserNotLoggedInException.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,8 +0,0 @@
-package com.lambakean.rationplanner.domain.exception;
-
-public class UserNotLoggedInException extends RuntimeException {
-
-    public UserNotLoggedInException(String message) {
-        super(message);
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/domain/mapper/ScheduleMapper.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/mapper/ScheduleMapper.java b/src/main/java/com/lambakean/rationplanner/domain/mapper/ScheduleMapper.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/mapper/ScheduleMapper.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,40 +0,0 @@
-package com.lambakean.rationplanner.domain.mapper;
-
-import com.lambakean.rationplanner.data.model.Schedule;
-import com.lambakean.rationplanner.representation.dto.DateDto;
-import com.lambakean.rationplanner.representation.dto.ScheduleDto;
-import com.lambakean.rationplanner.representation.dto.TimeDto;
-import com.lambakean.rationplanner.representation.dto.form.ScheduleCreationForm;
-import org.mapstruct.Mapper;
-import org.springframework.beans.factory.annotation.Autowired;
-
-import java.time.LocalDate;
-import java.time.LocalTime;
-
-@Mapper(componentModel = "spring")
-public abstract class ScheduleMapper {
-
-    @Autowired
-    protected DateAndTimeMapper dateAndTimeMapper;
-
-    public abstract Schedule toSchedule(ScheduleCreationForm scheduleCreationForm);
-
-    public abstract ScheduleDto toScheduleDto(Schedule schedule);
-
-
-    protected LocalDate map(DateDto dateDto) {
-        return dateAndTimeMapper.toLocalDate(dateDto);
-    }
-
-    protected DateDto map(LocalDate localDate) {
-        return dateAndTimeMapper.toDateDto(localDate);
-    }
-
-    protected LocalTime map(TimeDto timeDto) {
-        return dateAndTimeMapper.toLocalTime(timeDto);
-    }
-
-    protected TimeDto map(LocalTime localTime) {
-        return dateAndTimeMapper.toTimeDto(localTime);
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/representation/dto/IngredientDto.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/dto/IngredientDto.java b/src/main/java/com/lambakean/rationplanner/representation/dto/IngredientDto.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/dto/IngredientDto.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,15 +0,0 @@
-package com.lambakean.rationplanner.representation.dto;
-
-import lombok.Getter;
-import lombok.Setter;
-
-@Getter
-@Setter
-public class IngredientDto {
-
-    private String id;
-    private String name;
-    private ProductDto productDto;
-    private ProductQuantityDto productQuantityDto;
-    private Double price;
-}
Index: src/main/java/com/lambakean/rationplanner/domain/exception/FileNotFoundException.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/exception/FileNotFoundException.java b/src/main/java/com/lambakean/rationplanner/domain/exception/FileNotFoundException.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/exception/FileNotFoundException.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,3 +0,0 @@
-package com.lambakean.rationplanner.domain.exception;
-
-public class FileNotFoundException extends RuntimeException {}
Index: src/main/java/com/lambakean/rationplanner/representation/dto/PhotoDto.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/dto/PhotoDto.java b/src/main/java/com/lambakean/rationplanner/representation/dto/PhotoDto.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/dto/PhotoDto.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,15 +0,0 @@
-package com.lambakean.rationplanner.representation.dto;
-
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-import lombok.NoArgsConstructor;
-import lombok.Setter;
-
-@NoArgsConstructor
-@AllArgsConstructor
-@Getter
-@Setter
-public class PhotoDto {
-
-    private String id;
-}
Index: src/main/java/com/lambakean/rationplanner/representation/dto/ScheduleDto.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/dto/ScheduleDto.java b/src/main/java/com/lambakean/rationplanner/representation/dto/ScheduleDto.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/dto/ScheduleDto.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,14 +0,0 @@
-package com.lambakean.rationplanner.representation.dto;
-
-import lombok.Getter;
-import lombok.Setter;
-
-@Getter
-@Setter
-public class ScheduleDto {
-
-    private String id;
-    private PlannedDayDto plannedDay;
-    private DateDto startDate;
-    private Integer nextRepeatAfterDays;
-}
Index: src/main/java/com/lambakean/rationplanner/data/repository/IngredientRepository.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/data/repository/IngredientRepository.java b/src/main/java/com/lambakean/rationplanner/data/repository/IngredientRepository.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/data/repository/IngredientRepository.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,6 +0,0 @@
-package com.lambakean.rationplanner.data.repository;
-
-import com.lambakean.rationplanner.data.model.Ingredient;
-import org.springframework.data.jpa.repository.JpaRepository;
-
-public interface IngredientRepository extends JpaRepository<Ingredient, String> {}
Index: src/main/java/com/lambakean/rationplanner/data/model/AccessTokenWrapper.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/data/model/AccessTokenWrapper.java b/src/main/java/com/lambakean/rationplanner/data/model/AccessTokenWrapper.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/data/model/AccessTokenWrapper.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,23 +0,0 @@
-package com.lambakean.rationplanner.data.model;
-
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-import lombok.NoArgsConstructor;
-import lombok.Setter;
-
-import java.time.ZonedDateTime;
-
-/**
- * Обёртка для access токенов
- */
-@NoArgsConstructor
-@AllArgsConstructor
-@Getter
-@Setter
-public class AccessTokenWrapper {
-
-    private String token;
-
-    private User user;
-    private ZonedDateTime expiresAt;
-}
Index: src/main/java/com/lambakean/rationplanner/data/repository/ProductRepository.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/data/repository/ProductRepository.java b/src/main/java/com/lambakean/rationplanner/data/repository/ProductRepository.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/data/repository/ProductRepository.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,14 +0,0 @@
-package com.lambakean.rationplanner.data.repository;
-
-import com.lambakean.rationplanner.data.model.Product;
-import com.lambakean.rationplanner.data.model.User;
-import org.springframework.data.jpa.repository.JpaRepository;
-
-import java.util.List;
-
-public interface ProductRepository extends JpaRepository<Product, String> {
-
-    List<Product> getAllByUser(User user);
-
-    boolean existsByIdAndUser(String id, User user);
-}
\ No newline at end of file
Index: src/main/java/com/lambakean/rationplanner/domain/mapper/PhotoMapper.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/mapper/PhotoMapper.java b/src/main/java/com/lambakean/rationplanner/domain/mapper/PhotoMapper.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/mapper/PhotoMapper.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,11 +0,0 @@
-package com.lambakean.rationplanner.domain.mapper;
-
-import com.lambakean.rationplanner.data.model.Photo;
-import com.lambakean.rationplanner.representation.dto.PhotoDto;
-import org.mapstruct.Mapper;
-
-@Mapper(componentModel = "spring")
-public interface PhotoMapper {
-
-    PhotoDto toPhotoDto(Photo photo);
-}
Index: src/main/java/com/lambakean/rationplanner/domain/exception/EntityNotFoundException.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/exception/EntityNotFoundException.java b/src/main/java/com/lambakean/rationplanner/domain/exception/EntityNotFoundException.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/exception/EntityNotFoundException.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,8 +0,0 @@
-package com.lambakean.rationplanner.domain.exception;
-
-public class EntityNotFoundException extends RuntimeException {
-
-    public EntityNotFoundException(String message) {
-        super(message);
-    }
-}
\ No newline at end of file
Index: src/main/java/com/lambakean/rationplanner/representation/dto/form/PlannedDayCreationForm.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/dto/form/PlannedDayCreationForm.java b/src/main/java/com/lambakean/rationplanner/representation/dto/form/PlannedDayCreationForm.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/dto/form/PlannedDayCreationForm.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,24 +0,0 @@
-package com.lambakean.rationplanner.representation.dto.form;
-
-import com.lambakean.rationplanner.representation.dto.EntityIdReferenceDto;
-import com.lambakean.rationplanner.representation.dto.TimeDto;
-import lombok.Getter;
-import lombok.Setter;
-
-import java.util.List;
-
-@Getter
-@Setter
-public class PlannedDayCreationForm {
-
-    private String name;
-    private List<PlannedDayMealInformation> plannedDayMeals;
-
-    @Getter
-    @Setter
-    public static class PlannedDayMealInformation {
-
-        private EntityIdReferenceDto meal;
-        private TimeDto time;
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/Application.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/Application.java b/src/main/java/com/lambakean/rationplanner/Application.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/Application.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,67 +0,0 @@
-package com.lambakean.rationplanner;
-
-import org.springframework.boot.SpringApplication;
-import org.springframework.boot.autoconfigure.SpringBootApplication;
-import org.springframework.context.annotation.Bean;
-import org.springframework.scheduling.annotation.EnableScheduling;
-import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
-import org.springframework.security.crypto.password.PasswordEncoder;
-import springfox.documentation.builders.RequestHandlerSelectors;
-import springfox.documentation.service.ApiInfo;
-import springfox.documentation.service.Contact;
-import springfox.documentation.service.VendorExtension;
-import springfox.documentation.spi.DocumentationType;
-import springfox.documentation.spring.web.plugins.Docket;
-import springfox.documentation.swagger2.annotations.EnableSwagger2;
-
-import java.util.Collection;
-import java.util.Collections;
-
-@SpringBootApplication
-@EnableScheduling
-@EnableSwagger2
-public class Application {
-
-    public static void main(String[] args) {
-        SpringApplication.run(Application.class, args);
-    }
-
-    @Bean("bCryptPasswordEncoder")
-    public PasswordEncoder passwordEncoder() {
-        return new BCryptPasswordEncoder();
-    }
-
-    @Bean
-    public Docket swaggerConfiguration() {
-        return new Docket(DocumentationType.SWAGGER_2)
-                .select()
-                .apis(RequestHandlerSelectors.basePackage("com.lambakean"))
-                .build()
-                .apiInfo(apiInfo());
-    }
-
-    private ApiInfo apiInfo() {
-
-        String title = "Ration Planner API";
-        String desciption = "Для корректного выполнения некоторых запросов приложение должно аутентифицировать" +
-                " пользователя. \n Для успешной аутентификации пользователя в запросе должен пристуствовать " +
-                "заголовок Authorization со значением \"Bearer [access token]\". Access токен можно получить при" +
-                " помощи некоторых методов в контроллере user-controller.";
-        String version = "1.0";
-        Contact contact = new Contact(null, null, "lambakean@gmail.com");
-        String license = "Apache 2.0";
-        String licenseUrl = "https://www.apache.org/licenses/LICENSE-2.0";
-        Collection<VendorExtension> vendorExtensions = Collections.emptyList();
-
-        return new ApiInfo(
-                title,
-                desciption,
-                version,
-                null,
-                contact,
-                license,
-                licenseUrl,
-                vendorExtensions
-        );
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/domain/service/impl/SecurityTokensServiceImpl.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/service/impl/SecurityTokensServiceImpl.java b/src/main/java/com/lambakean/rationplanner/domain/service/impl/SecurityTokensServiceImpl.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/service/impl/SecurityTokensServiceImpl.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,103 +0,0 @@
-package com.lambakean.rationplanner.domain.service.impl;
-
-import com.lambakean.rationplanner.domain.exception.AuthenticationException;
-import com.lambakean.rationplanner.data.model.SecurityTokensHolder;
-import com.lambakean.rationplanner.data.model.User;
-import com.lambakean.rationplanner.data.repository.RefreshTokenWrapperRepository;
-import com.lambakean.rationplanner.data.model.AccessTokenWrapper;
-import com.lambakean.rationplanner.domain.security.JwtTokenProvider;
-import com.lambakean.rationplanner.data.model.RefreshTokenWrapper;
-import com.lambakean.rationplanner.domain.security.TokenResolver;
-import com.lambakean.rationplanner.domain.service.SecurityTokensService;
-import lombok.RequiredArgsConstructor;
-import org.springframework.beans.factory.annotation.Value;
-import org.springframework.lang.NonNull;
-import org.springframework.stereotype.Service;
-
-import javax.servlet.http.Cookie;
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
-import java.time.ZonedDateTime;
-import java.time.temporal.ChronoUnit;
-
-@Service
-@RequiredArgsConstructor
-public class SecurityTokensServiceImpl implements SecurityTokensService {
-
-    @Value("${access-token.validity-time-in-minutes}")
-    private Long accessTokenValidityTimeInMinutes;
-
-    @Value("${refresh-token.validity-time-in-minutes}")
-    private Long refreshTokenValidityTimeInMinutes;
-
-    private final RefreshTokenWrapperRepository refreshTokenWrapperRepository;
-
-    private final JwtTokenProvider jwtTokenProvider;
-    private final TokenResolver refreshTokenResolver;
-
-    @Override
-    public RefreshTokenWrapper createRefreshTokenWrapper(@NonNull User user) {
-
-        String refreshToken = jwtTokenProvider.createToken(user, refreshTokenValidityTimeInMinutes);
-        ZonedDateTime expiresAt = ZonedDateTime.now().plusMinutes(refreshTokenValidityTimeInMinutes);
-
-        return new RefreshTokenWrapper(refreshToken, user, expiresAt);
-    }
-
-    @Override
-    public AccessTokenWrapper createAccessTokenWrapper(@NonNull User user) {
-
-        String accessToken = jwtTokenProvider.createToken(user, accessTokenValidityTimeInMinutes);
-        ZonedDateTime expiresAt = ZonedDateTime.now().plusMinutes(accessTokenValidityTimeInMinutes);
-
-        return new AccessTokenWrapper(accessToken, user, expiresAt);
-    }
-
-    @Override
-    public void save(@NonNull RefreshTokenWrapper refreshTokenWrapper) {
-        refreshTokenWrapperRepository.save(refreshTokenWrapper);
-    }
-
-    @Override
-    public SecurityTokensHolder updateTokens(HttpServletRequest httpServletRequest,
-                                             HttpServletResponse httpServletResponse) {
-
-        String refreshToken = refreshTokenResolver.resolveToken(httpServletRequest).orElseThrow(
-                () -> new AuthenticationException(
-                        "Для обновления токенов безопасности в запросе должен присутствовать refresh токен."
-                )
-        );
-
-        RefreshTokenWrapper refreshTokenWrapper = refreshTokenWrapperRepository.findByToken(refreshToken).orElseThrow(
-                () -> new AuthenticationException("Refresh токен невалиден или просрочен. Войдите в аккаунт заново.")
-        );
-
-        if(refreshTokenWrapper.isExpired()) {
-            throw new AuthenticationException("Refresh токен просрочен. Войдите в аккаунт заново.");
-        }
-
-        User user = refreshTokenWrapper.getUser();
-
-        AccessTokenWrapper newAccessTokenWrapper = createAccessTokenWrapper(user);
-        RefreshTokenWrapper newRefreshTokenWrapper = createRefreshTokenWrapper(user);
-
-        refreshTokenWrapperRepository.save(refreshTokenWrapper);
-
-        httpServletResponse.addCookie(createRefreshTokenCookie(newRefreshTokenWrapper));
-
-        return new SecurityTokensHolder(user, newAccessTokenWrapper, newRefreshTokenWrapper);
-    }
-
-    private Cookie createRefreshTokenCookie(RefreshTokenWrapper refreshTokenWrapper) {
-
-        long maxAgeInSeconds = ChronoUnit.SECONDS.between(ZonedDateTime.now(), refreshTokenWrapper.getExpiresAt());
-
-        Cookie cookie = new Cookie("refresh_token", refreshTokenWrapper.getToken());
-        cookie.setSecure(false);
-        cookie.setHttpOnly(true);
-        cookie.setPath("/api/v1/user/token");
-        cookie.setMaxAge((int) maxAgeInSeconds);
-
-        return cookie;
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/domain/exception/AccessDeniedException.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/exception/AccessDeniedException.java b/src/main/java/com/lambakean/rationplanner/domain/exception/AccessDeniedException.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/exception/AccessDeniedException.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,8 +0,0 @@
-package com.lambakean.rationplanner.domain.exception;
-
-public class AccessDeniedException extends RuntimeException {
-
-    public AccessDeniedException(String message) {
-        super(message);
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/data/model/Meal.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/data/model/Meal.java b/src/main/java/com/lambakean/rationplanner/data/model/Meal.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/data/model/Meal.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,64 +0,0 @@
-package com.lambakean.rationplanner.data.model;
-
-import lombok.Getter;
-import lombok.Setter;
-
-import javax.persistence.*;
-import java.time.Duration;
-import java.util.List;
-import java.util.Set;
-
-@Entity
-@Table(name = "meals")
-@Getter
-@Setter
-public class Meal extends BaseEntity {
-
-    @Column(nullable = false)
-    private String name;
-
-    private String description;
-
-    @Column(name = "cooking_duration", nullable = false)
-    private Duration cookingDuration;
-
-    @Column(length = 10000)
-    private String recipe;
-
-    @OneToMany(mappedBy = "meal", fetch = FetchType.EAGER, cascade = CascadeType.ALL)
-    private List<Ingredient> ingredients;
-
-    @ManyToOne
-    @JoinColumn(name = "user_id", nullable = false)
-    private User user;
-
-    @OneToOne
-    @JoinColumn(name = "photo_id", referencedColumnName = "id", unique = true)
-    private Photo photo;
-
-    @OneToMany(mappedBy = "meal", fetch = FetchType.LAZY, cascade = CascadeType.ALL)
-    private Set<PlannedDayMeal> plannedDayMeals;
-
-    public Double getPrice() {
-
-        if(this.ingredients == null) {
-            return 0.0;
-        }
-
-        Double totalPrice = 0.0;
-
-        for(Ingredient ingredient : ingredients) {
-            totalPrice += ingredient.getPrice();
-        }
-
-        return totalPrice;
-    }
-
-    public String getUserId() {
-        if(user == null) {
-            return null;
-        }
-
-        return user.getId();
-    }
-}
\ No newline at end of file
Index: src/main/java/com/lambakean/rationplanner/domain/exception/BadRequestException.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/exception/BadRequestException.java b/src/main/java/com/lambakean/rationplanner/domain/exception/BadRequestException.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/exception/BadRequestException.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,8 +0,0 @@
-package com.lambakean.rationplanner.domain.exception;
-
-public class BadRequestException extends RuntimeException {
-
-    public BadRequestException(String message) {
-        super(message);
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/representation/dto/TimeDto.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/dto/TimeDto.java b/src/main/java/com/lambakean/rationplanner/representation/dto/TimeDto.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/dto/TimeDto.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,16 +0,0 @@
-package com.lambakean.rationplanner.representation.dto;
-
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-import lombok.NoArgsConstructor;
-import lombok.Setter;
-
-@NoArgsConstructor
-@AllArgsConstructor
-@Getter
-@Setter
-public class TimeDto {
-
-    private Integer hours;
-    private Integer minutes;
-}
Index: src/main/java/com/lambakean/rationplanner/domain/validator/ProductQuantityValidator.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/validator/ProductQuantityValidator.java b/src/main/java/com/lambakean/rationplanner/domain/validator/ProductQuantityValidator.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/validator/ProductQuantityValidator.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,46 +0,0 @@
-package com.lambakean.rationplanner.domain.validator;
-
-import com.lambakean.rationplanner.data.model.ProductQuantity;
-import org.springframework.lang.NonNull;
-import org.springframework.stereotype.Component;
-import org.springframework.validation.Errors;
-import org.springframework.validation.Validator;
-
-@Component
-public class ProductQuantityValidator implements Validator {
-
-    @Override
-    public boolean supports(@NonNull Class<?> clazz) {
-        return ProductQuantity.class.equals(clazz);
-    }
-
-    @Override
-    public void validate(@NonNull Object target, @NonNull Errors errors) {
-
-        ProductQuantity productQuantity = (ProductQuantity) target;
-
-        validateAmount(productQuantity, errors);
-    }
-
-    public void validateAmount(@NonNull ProductQuantity productQuantity, @NonNull Errors errors) {
-
-        Double amount = productQuantity.getAmount();
-
-        if(amount == null) {
-            errors.rejectValue(
-                    "amount",
-                    "amount.invalid",
-                    "Вы должны указать количество продукта"
-            );
-            return;
-        }
-
-        if(amount <= 0) {
-            errors.rejectValue(
-                    "amount",
-                    "amount.invalid",
-                    "Количество продукта не должно быть отрицательным или равным нулю"
-            );
-        }
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/domain/service/impl/PlannedDayServiceImpl.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/service/impl/PlannedDayServiceImpl.java b/src/main/java/com/lambakean/rationplanner/domain/service/impl/PlannedDayServiceImpl.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/service/impl/PlannedDayServiceImpl.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,111 +0,0 @@
-package com.lambakean.rationplanner.domain.service.impl;
-
-import com.lambakean.rationplanner.data.model.Meal;
-import com.lambakean.rationplanner.data.model.PlannedDay;
-import com.lambakean.rationplanner.data.model.User;
-import com.lambakean.rationplanner.data.repository.PlannedDayRepository;
-import com.lambakean.rationplanner.domain.exception.AccessDeniedException;
-import com.lambakean.rationplanner.domain.exception.EntityNotFoundException;
-import com.lambakean.rationplanner.domain.service.MealService;
-import com.lambakean.rationplanner.domain.service.PlannedDayService;
-import com.lambakean.rationplanner.domain.service.PrincipalService;
-import com.lambakean.rationplanner.domain.service.ValidationService;
-import lombok.RequiredArgsConstructor;
-import org.springframework.lang.NonNull;
-import org.springframework.stereotype.Service;
-import org.springframework.validation.Validator;
-
-import javax.persistence.EntityManager;
-import javax.transaction.Transactional;
-import java.util.Set;
-
-@Service
-@RequiredArgsConstructor
-public class PlannedDayServiceImpl implements PlannedDayService {
-
-    private final PrincipalService principalService;
-    private final PlannedDayRepository plannedDayRepository;
-    private final MealService mealService;
-    private final EntityManager entityManager;
-
-    private final ValidationService validationService;
-
-    private final Validator plannedDayValidator;
-    private final Validator plannedDayMealValidator;
-
-
-
-    @Override
-    @Transactional
-    public PlannedDay createPlannedDay(PlannedDay plannedDayData) {
-
-        User user = principalService.getPrincipal();
-
-        plannedDayData.setUser(user);
-
-        plannedDayData.getPlannedDayMeals()
-                .forEach(plannedDayMeal -> {
-
-                    plannedDayMeal.setPlannedDay(plannedDayData);
-
-                    validationService.validateThrowExceptionIfInvalid(plannedDayMeal, plannedDayMealValidator);
-
-                    Meal meal = plannedDayMeal.getMeal();
-
-                    if(!mealService.belongsTo(meal.getId(), user.getId())) {
-                        throw new AccessDeniedException(
-                                String.format("У вас нет доступа к блюду c id [%s]", meal.getName())
-                        );
-                    }
-                });
-
-        validationService.validateThrowExceptionIfInvalid(plannedDayData, plannedDayValidator);
-
-        plannedDayRepository.saveAndFlush(plannedDayData);
-
-        entityManager.clear();
-
-        return plannedDayRepository.findById(plannedDayData.getId()).get();
-    }
-
-    @Override
-    public PlannedDay getPlannedDayById(@NonNull String id) {
-
-        User user = principalService.getPrincipal();
-
-        PlannedDay plannedDay = plannedDayRepository.findById(id).orElseThrow(
-                () -> new EntityNotFoundException(String.format("День с id [%s] не существует", id))
-        );
-
-        if(!user.getId().equals(plannedDay.getUser().getId())) {
-            throw new AccessDeniedException(String.format("Вы не имеете доступа ко дню с id [%s]", id));
-        }
-
-        return plannedDay;
-    }
-
-    @Override
-    @Transactional
-    public Set<PlannedDay> getCurrentUserPlannedDays() {
-
-        User user = principalService.getPrincipal();
-
-        return plannedDayRepository.findByUser(user);
-    }
-
-    @Override
-    public void deletePlannedDayById(@NonNull String id) {
-
-        User user = principalService.getPrincipal();
-
-        PlannedDay plannedDay = plannedDayRepository.findById(id).orElseThrow(
-                () -> new EntityNotFoundException("День с id [%s] не существует")
-        );
-
-        if(!plannedDay.getUserId().equals(user.getId())) {
-            throw new AccessDeniedException(String.format("Вы не имеете доступ ко дню с id [%s]", id));
-        }
-
-        plannedDayRepository.delete(plannedDay);
-    }
-}
\ No newline at end of file
Index: src/main/java/com/lambakean/rationplanner/domain/validator/MealValidator.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/validator/MealValidator.java b/src/main/java/com/lambakean/rationplanner/domain/validator/MealValidator.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/validator/MealValidator.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,124 +0,0 @@
-package com.lambakean.rationplanner.domain.validator;
-
-import com.lambakean.rationplanner.data.model.Meal;
-import com.lambakean.rationplanner.data.model.Photo;
-import com.lambakean.rationplanner.data.repository.PhotoRepository;
-import lombok.RequiredArgsConstructor;
-import org.springframework.lang.NonNull;
-import org.springframework.stereotype.Component;
-import org.springframework.validation.Errors;
-import org.springframework.validation.Validator;
-
-@Component
-@RequiredArgsConstructor
-public class MealValidator implements Validator {
-
-    private final PhotoRepository photoRepository;
-
-    @Override
-    public boolean supports(@NonNull Class<?> clazz) {
-        return Meal.class.equals(clazz);
-    }
-
-    @Override
-    public void validate(@NonNull Object target, @NonNull Errors errors) {
-
-        Meal meal = (Meal) target;
-
-        validateName(meal, errors);
-        validateDescription(meal, errors);
-        validateCookingDuration(meal, errors);
-        validateRecipe(meal, errors);
-        validatePhoto(meal, errors);
-    }
-
-    public void validateName(@NonNull Meal meal, @NonNull Errors errors) {
-
-        String name = meal.getName();
-
-        if (name == null) {
-            errors.rejectValue(
-                    "name",
-                    "name.invalid",
-                    "Название блюда не должно быть пустым"
-            );
-            return;
-        }
-
-        if(2 > name.length() || name.length() > 50) {
-            errors.rejectValue(
-                    "name",
-                    "name.invalid",
-                    "Название блюда должно иметь длину от 2 до 50 символов"
-            );
-        }
-    }
-
-    public void validateDescription(@NonNull Meal meal, @NonNull Errors errors) {
-
-        String description = meal.getDescription();
-
-        if(description == null) {
-            return;
-        }
-
-        if(1 > description.length() || description.length() > 250) {
-            errors.rejectValue(
-                    "description",
-                    "description.invalid",
-                    "Описание блюда должно иметь длину от 1 до 255 символов"
-            );
-        }
-    }
-
-    public void validateCookingDuration(@NonNull Meal meal, @NonNull Errors errors) {
-
-        if(meal.getCookingDuration() == null) {
-            errors.rejectValue(
-                    "cookingDuration",
-                    "cookingDuration.invalid",
-                    "Время приготовления блюда не указано или указано неверно"
-            );
-        }
-    }
-
-    public void validateRecipe(@NonNull Meal meal, @NonNull Errors errors) {
-
-        String recipe = meal.getRecipe();
-
-        if(recipe == null || recipe.equals("")) {
-            return;
-        }
-
-        if(1 > recipe.length() || recipe.length() > 10000) {
-            errors.rejectValue(
-                    "recipe",
-                    "recipe.invalid",
-                    "Описание рецепта блюда не должно быть длиннее 10000 символов"
-            );
-        }
-    }
-
-    public void validatePhoto(@NonNull Meal meal, @NonNull Errors errors) {
-
-        Photo photo = meal.getPhoto();
-
-        if(photo == null) return;
-
-        if(photo.getId() == null) {
-            errors.rejectValue(
-                    "photo",
-                    "photo.invalid",
-                    "Данные о фотографии блюда заполнены неверно"
-            );
-        }
-
-        if(!photoRepository.existsById(photo.getId())) {
-            errors.rejectValue(
-                    "photo",
-                    "photo.invalid",
-                    String.format("Фотография с id [%s] не существует", photo.getId())
-            );
-        }
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/data/model/Product.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/data/model/Product.java b/src/main/java/com/lambakean/rationplanner/data/model/Product.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/data/model/Product.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,59 +0,0 @@
-package com.lambakean.rationplanner.data.model;
-
-import lombok.Getter;
-import lombok.Setter;
-
-import javax.persistence.*;
-import java.util.Set;
-
-@Entity
-@Table(name = "products")
-@Getter
-@Setter
-public class Product extends BaseEntity {
-
-    @Column(nullable = false)
-    private String name;
-
-    private String producer;
-
-    @Column(nullable = false)
-    private Double price;
-
-    @OneToOne(cascade = CascadeType.ALL)
-    @JoinColumn(name = "product_quantity_id", referencedColumnName = "id", nullable = false)
-    private ProductQuantity quantity;
-
-    @ManyToOne
-    @JoinColumn(name = "user_id", nullable = false)
-    private User user;
-
-    @OneToOne
-    @JoinColumn(name = "photo_id", referencedColumnName = "id")
-    private Photo photo;
-
-    @OneToMany(mappedBy = "meal", fetch = FetchType.LAZY)
-    private Set<Ingredient> relatedIngredients;
-
-    public Double quantityDifferenceCoef(ProductQuantity productQuantity) {
-        return productQuantity.getAmount() / quantity.getAmount();
-    }
-
-    public Double getQuantityAmount() {
-
-        if(quantity == null) return null;
-        return quantity.getAmount();
-    }
-
-    public String getUserId() {
-
-        if(user == null) return null;
-        return user.getId();
-    }
-
-    public String getMeasurementUnitId() {
-
-        if(quantity == null) return null;
-        return quantity.getMeasurementUnitId();
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/data/repository/ScheduleRepository.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/data/repository/ScheduleRepository.java b/src/main/java/com/lambakean/rationplanner/data/repository/ScheduleRepository.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/data/repository/ScheduleRepository.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,17 +0,0 @@
-package com.lambakean.rationplanner.data.repository;
-
-import com.lambakean.rationplanner.data.model.Schedule;
-import com.lambakean.rationplanner.data.model.User;
-import org.springframework.data.jpa.repository.JpaRepository;
-import org.springframework.data.jpa.repository.Query;
-import org.springframework.data.repository.query.Param;
-
-import java.util.Set;
-
-public interface ScheduleRepository extends JpaRepository<Schedule, String> {
-
-    @Query(
-        value = "select s from Schedule s where s.plannedDay.user.id = :#{#user.id}"
-    )
-    Set<Schedule> findAllByUser(@Param("user") User user);
-}
Index: src/main/java/com/lambakean/rationplanner/domain/security/JwtTokenProvider.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/security/JwtTokenProvider.java b/src/main/java/com/lambakean/rationplanner/domain/security/JwtTokenProvider.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/security/JwtTokenProvider.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,47 +0,0 @@
-package com.lambakean.rationplanner.domain.security;
-
-import com.lambakean.rationplanner.data.model.User;
-import io.jsonwebtoken.*;
-import org.springframework.beans.factory.annotation.Value;
-import org.springframework.lang.NonNull;
-import org.springframework.stereotype.Component;
-
-import java.util.Date;
-
-/**
- * Класс, позволяющий производить различные манипуляции над jwt токенами
- */
-@Component
-public class JwtTokenProvider {
-
-    @Value("${jwt.secret}")
-    private String secret;
-
-    public String createToken(@NonNull User user, @NonNull Long validityTimeInMinutes) {
-
-        Claims claims = Jwts.claims().setSubject(user.getId());
-
-        Date now = new Date();
-        Date validUntil = new Date(now.getTime() + validityTimeInMinutes * 60 * 1000);
-
-        return Jwts.builder()
-                .setClaims(claims)
-                .setIssuedAt(now)
-                .setExpiration(validUntil)
-                .signWith(SignatureAlgorithm.HS256, secret)
-                .compact();
-    }
-
-    public String getSubject(@NonNull String token) {
-        return Jwts.parser().setSigningKey(secret).parseClaimsJws(token).getBody().getSubject();
-    }
-
-    public boolean validateToken(String token) {
-        try {
-            Jws<Claims> claims = Jwts.parser().setSigningKey(secret).parseClaimsJws(token);
-            return claims.getBody().getExpiration().after(new Date());
-        } catch (JwtException | IllegalArgumentException e) {
-            return false;
-        }
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/domain/service/impl/MealServiceImpl.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/service/impl/MealServiceImpl.java b/src/main/java/com/lambakean/rationplanner/domain/service/impl/MealServiceImpl.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/service/impl/MealServiceImpl.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,104 +0,0 @@
-package com.lambakean.rationplanner.domain.service.impl;
-
-import com.lambakean.rationplanner.data.model.Meal;
-import com.lambakean.rationplanner.data.model.User;
-import com.lambakean.rationplanner.data.repository.MealRepository;
-import com.lambakean.rationplanner.domain.exception.AccessDeniedException;
-import com.lambakean.rationplanner.domain.exception.EntityNotFoundException;
-import com.lambakean.rationplanner.domain.service.MealService;
-import com.lambakean.rationplanner.domain.service.PrincipalService;
-import com.lambakean.rationplanner.domain.service.ValidationService;
-import lombok.RequiredArgsConstructor;
-import org.springframework.lang.NonNull;
-import org.springframework.stereotype.Service;
-import org.springframework.validation.Validator;
-
-import javax.persistence.EntityManager;
-import javax.transaction.Transactional;
-import java.util.ArrayList;
-import java.util.List;
-
-@Service
-@RequiredArgsConstructor
-public class MealServiceImpl implements MealService {
-
-    private final PrincipalService principalService;
-
-    private final MealRepository mealRepository;
-    private final EntityManager entityManager;
-
-    private final ValidationService validationService;
-    private final Validator mealValidator;
-    private final Validator ingredientValidator;
-
-    @Override
-    @Transactional
-    public Meal createMeal(@NonNull Meal mealData) {
-
-        User user = principalService.getPrincipal();
-
-        mealData.setUser(user);
-
-        if(mealData.getIngredients() == null) {
-            mealData.setIngredients(new ArrayList<>());
-        }
-        mealData.getIngredients()
-                .forEach(ingredient -> {
-                    ingredient.setMeal(mealData);
-                    validationService.validateThrowExceptionIfInvalid(ingredient, ingredientValidator);
-                });
-
-        validationService.validateThrowExceptionIfInvalid(mealData, mealValidator);
-
-        mealRepository.saveAndFlush(mealData);
-
-        entityManager.clear();
-
-        return mealRepository.findById(mealData.getId()).get();
-    }
-
-    @Override
-    public Meal getMealById(String id) {
-
-        User user = principalService.getPrincipal();
-
-        Meal meal = mealRepository.findById(id).orElseThrow(
-                () -> new EntityNotFoundException(String.format("Блюдо с id [%s] не существует", id))
-        );
-
-        if(!user.getId().equals(meal.getUserId())) {
-            throw new AccessDeniedException(String.format("Вы не имеете доступа к блюду с id [%s].", id));
-        }
-
-        return meal;
-    }
-
-    @Override
-    public void deleteMealById(String id) {
-
-        User user = principalService.getPrincipal();
-
-        if(id == null || !mealRepository.existsByIdAndUser(id, user)) {
-            throw new EntityNotFoundException(String.format("Блюдо с id [%s] не существует", id));
-        }
-
-        mealRepository.deleteById(id);
-    }
-
-    @Override
-    @Transactional
-    public List<Meal> getCurrentUserMeals() {
-
-        User user = principalService.getPrincipal();
-
-        return mealRepository.findAllByUser(user);
-    }
-
-    @Override
-    public boolean belongsTo(@NonNull String mealId, @NonNull String userId) {
-
-        Meal meal = getMealById(mealId);
-
-        return meal.getUserId().equals(userId);
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/data/model/PlannedDayMeal.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/data/model/PlannedDayMeal.java b/src/main/java/com/lambakean/rationplanner/data/model/PlannedDayMeal.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/data/model/PlannedDayMeal.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,39 +0,0 @@
-package com.lambakean.rationplanner.data.model;
-
-import lombok.Getter;
-import lombok.Setter;
-import org.springframework.lang.NonNull;
-
-import javax.persistence.*;
-import java.time.LocalTime;
-
-@Entity
-@Table(name = "planned_day_meals")
-@Getter
-@Setter
-public class PlannedDayMeal extends BaseEntity implements Comparable<PlannedDayMeal> {
-
-    @ManyToOne
-    @JoinColumn(name = "planned_day_id", nullable = false)
-    private PlannedDay plannedDay;
-
-    @ManyToOne
-    @JoinColumn(name = "meal_id", nullable = false)
-    private Meal meal;
-
-    @Column(nullable = false)
-    private LocalTime time;
-
-    public Double getPrice() {
-        if(meal == null) {
-            return 0.0;
-        }
-
-        return meal.getPrice();
-    }
-
-    @Override
-    public int compareTo(@NonNull PlannedDayMeal another) {
-        return time.compareTo(another.getTime());
-    }
-}
Index: src/main/java/com/lambakean/rationplanner/domain/service/MeasurementUnitService.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/service/MeasurementUnitService.java b/src/main/java/com/lambakean/rationplanner/domain/service/MeasurementUnitService.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/service/MeasurementUnitService.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,10 +0,0 @@
-package com.lambakean.rationplanner.domain.service;
-
-import com.lambakean.rationplanner.data.model.MeasurementUnit;
-
-import java.util.List;
-
-public interface MeasurementUnitService {
-
-    List<MeasurementUnit> getUnits();
-}
Index: src/main/java/com/lambakean/rationplanner/data/model/ScheduledPlannedDay.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/data/model/ScheduledPlannedDay.java b/src/main/java/com/lambakean/rationplanner/data/model/ScheduledPlannedDay.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/data/model/ScheduledPlannedDay.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,19 +0,0 @@
-package com.lambakean.rationplanner.data.model;
-
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-import lombok.NoArgsConstructor;
-import lombok.Setter;
-
-import java.time.LocalDate;
-
-@NoArgsConstructor
-@AllArgsConstructor
-@Getter
-@Setter
-public class ScheduledPlannedDay {
-
-    private Schedule schedule;
-    private PlannedDay plannedDay;
-    private LocalDate date;
-}
\ No newline at end of file
Index: src/main/java/com/lambakean/rationplanner/representation/dto/ProductDto.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/representation/dto/ProductDto.java b/src/main/java/com/lambakean/rationplanner/representation/dto/ProductDto.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/representation/dto/ProductDto.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,16 +0,0 @@
-package com.lambakean.rationplanner.representation.dto;
-
-import lombok.Getter;
-import lombok.Setter;
-
-@Getter
-@Setter
-public class ProductDto {
-
-    private String id;
-    private String name;
-    private String producer;
-    private ProductQuantityDto quantity;
-    private Double price;
-    private PhotoDto photo;
-}
Index: src/main/java/com/lambakean/rationplanner/data/model/Ingredient.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/data/model/Ingredient.java b/src/main/java/com/lambakean/rationplanner/data/model/Ingredient.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/data/model/Ingredient.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,37 +0,0 @@
-package com.lambakean.rationplanner.data.model;
-
-import lombok.Getter;
-import lombok.Setter;
-
-import javax.persistence.*;
-
-@Entity
-@Table(name = "ingredients")
-@Getter
-@Setter
-public class Ingredient extends BaseEntity {
-
-    @Column(nullable = false)
-    private String name;
-
-    @ManyToOne(fetch = FetchType.EAGER)
-    @JoinColumn(name = "product_id")
-    private Product product;
-
-    @ManyToOne
-    @JoinColumn(name = "meal_id", nullable = false)
-    private Meal meal;
-
-    @OneToOne(cascade = CascadeType.ALL)
-    @JoinColumn(name = "product_quantity_id", nullable = false)
-    private ProductQuantity productQuantity;
-
-    public Double getPrice() {
-
-        if(product == null || product.getPrice() == null) {
-            return 0.0;
-        }
-
-        return product.getPrice() * product.quantityDifferenceCoef(productQuantity);
-    }
-}
\ No newline at end of file
Index: src/main/java/com/lambakean/rationplanner/domain/mapper/DateAndTimeMapper.java
===================================================================
diff --git a/src/main/java/com/lambakean/rationplanner/domain/mapper/DateAndTimeMapper.java b/src/main/java/com/lambakean/rationplanner/domain/mapper/DateAndTimeMapper.java
deleted file mode 100644
--- a/src/main/java/com/lambakean/rationplanner/domain/mapper/DateAndTimeMapper.java	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ /dev/null	(revision 078ad760aac03c7b8032888a34d98649589146b4)
@@ -1,23 +0,0 @@
-package com.lambakean.rationplanner.domain.mapper;
-
-import com.lambakean.rationplanner.representation.dto.DateDto;
-import com.lambakean.rationplanner.representation.dto.TimeDto;
-
-import java.time.Duration;
-import java.time.LocalDate;
-import java.time.LocalTime;
-
-public interface DateAndTimeMapper {
-
-    Duration toDuration(TimeDto timeDto);
-
-    TimeDto toTimeDto(Duration duration);
-
-    LocalTime toLocalTime(TimeDto timeDto);
-
-    TimeDto toTimeDto(LocalTime localTime);
-
-    LocalDate toLocalDate(DateDto dateDto);
-
-    DateDto toDateDto(LocalDate localDate);
-}
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"CompilerConfiguration\">\n    <annotationProcessing>\n      <profile default=\"true\" name=\"Default\" enabled=\"true\" />\n      <profile name=\"Maven default annotation processors profile\" enabled=\"true\">\n        <sourceOutputDir name=\"target/generated-sources/annotations\" />\n        <sourceTestOutputDir name=\"target/generated-test-sources/test-annotations\" />\n        <outputRelativeToContentRoot value=\"true\" />\n      </profile>\n      <profile name=\"Annotation profile for rationplanner\" enabled=\"true\">\n        <sourceOutputDir name=\"target/generated-sources/annotations\" />\n        <sourceTestOutputDir name=\"target/generated-test-sources/test-annotations\" />\n        <outputRelativeToContentRoot value=\"true\" />\n        <processorPath useClasspath=\"false\">\n          <entry name=\"$MAVEN_REPOSITORY$/org/projectlombok/lombok/1.18.22/lombok-1.18.22.jar\" />\n          <entry name=\"$MAVEN_REPOSITORY$/org/mapstruct/mapstruct-processor/1.4.2.Final/mapstruct-processor-1.4.2.Final.jar\" />\n          <entry name=\"$MAVEN_REPOSITORY$/org/mapstruct/mapstruct/1.4.2.Final/mapstruct-1.4.2.Final.jar\" />\n        </processorPath>\n        <module name=\"RationPlanner\" />\n        <module name=\"ration-planner\" />\n      </profile>\n    </annotationProcessing>\n  </component>\n  <component name=\"JavacSettings\">\n    <option name=\"ADDITIONAL_OPTIONS_OVERRIDE\">\n      <module name=\"RationPlanner\" options=\"-parameters -Amapstruct.suppressGeneratorTimestamp=true -Amapstruct.suppressGeneratorVersionInfoComment=true -Amapstruct.defaultComponentModel=spring\" />\n      <module name=\"ration-planner\" options=\"-parameters -Amapstruct.suppressGeneratorTimestamp=true -Amapstruct.suppressGeneratorVersionInfoComment=true -Amapstruct.defaultComponentModel=spring\" />\n    </option>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
--- a/.idea/compiler.xml	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ b/.idea/compiler.xml	(date 1713366119362)
@@ -18,6 +18,7 @@
           <entry name="$MAVEN_REPOSITORY$/org/mapstruct/mapstruct/1.4.2.Final/mapstruct-1.4.2.Final.jar" />
         </processorPath>
         <module name="RationPlanner" />
+        <module name="rationplanner" />
         <module name="ration-planner" />
       </profile>
     </annotationProcessing>
@@ -26,6 +27,7 @@
     <option name="ADDITIONAL_OPTIONS_OVERRIDE">
       <module name="RationPlanner" options="-parameters -Amapstruct.suppressGeneratorTimestamp=true -Amapstruct.suppressGeneratorVersionInfoComment=true -Amapstruct.defaultComponentModel=spring" />
       <module name="ration-planner" options="-parameters -Amapstruct.suppressGeneratorTimestamp=true -Amapstruct.suppressGeneratorVersionInfoComment=true -Amapstruct.defaultComponentModel=spring" />
+      <module name="rationplanner" options="-parameters -Amapstruct.suppressGeneratorTimestamp=true -Amapstruct.suppressGeneratorVersionInfoComment=true -Amapstruct.defaultComponentModel=spring" />
     </option>
   </component>
 </project>
\ No newline at end of file
Index: .idea/dataSources.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"DataSourceManagerImpl\" format=\"xml\" multifile-model=\"true\">\n    <data-source source=\"LOCAL\" name=\"rationplanner@localhost\" uuid=\"f0af3923-df2e-4d48-a58e-75c0c0d06bb8\">\n      <driver-ref>postgresql</driver-ref>\n      <synchronize>true</synchronize>\n      <jdbc-driver>org.postgresql.Driver</jdbc-driver>\n      <jdbc-url>jdbc:postgresql://localhost:5432/rationplanner</jdbc-url>\n      <working-dir>$ProjectFileDir$</working-dir>\n    </data-source>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/dataSources.xml b/.idea/dataSources.xml
--- a/.idea/dataSources.xml	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ b/.idea/dataSources.xml	(date 1713366680089)
@@ -8,5 +8,12 @@
       <jdbc-url>jdbc:postgresql://localhost:5432/rationplanner</jdbc-url>
       <working-dir>$ProjectFileDir$</working-dir>
     </data-source>
+    <data-source source="LOCAL" name="planner@localhost" uuid="62fceae1-b5df-401f-a37e-9eccdc4d63b8">
+      <driver-ref>postgresql</driver-ref>
+      <synchronize>true</synchronize>
+      <jdbc-driver>org.postgresql.Driver</jdbc-driver>
+      <jdbc-url>jdbc:postgresql://localhost:5432/planner</jdbc-url>
+      <working-dir>$ProjectFileDir$</working-dir>
+    </data-source>
   </component>
 </project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\n  <component name=\"MavenProjectsManager\">\n    <option name=\"originalFiles\">\n      <list>\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_8\" default=\"true\" project-jdk-name=\"openjdk-16\" project-jdk-type=\"JavaSDK\">\n    <output url=\"file://$PROJECT_DIR$/out\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ b/.idea/misc.xml	(date 1713366197046)
@@ -8,7 +8,7 @@
       </list>
     </option>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" project-jdk-name="openjdk-16" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_16" default="true" project-jdk-name="openjdk-16" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
Index: src/main/resources/db/changelog/db.changelog-master.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<databaseChangeLog\n        xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog\n                      http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd\">\n\n    <preConditions>\n        <dbms type=\"postgresql\"/>\n    </preConditions>\n\n    <changeSet id=\"db-init\" author=\"lambakean\">\n        <tagDatabase tag=\"db_init\"/>\n    </changeSet>\n\n    <include file=\"/v.1.0/db.changelog-v.1.0.xml\" relativeToChangelogFile=\"true\"/>\n\n    <changeSet id=\"v.1.0\" author=\"lambakean\">\n        <tagDatabase tag=\"v.1.0\"/>\n    </changeSet>\n\n</databaseChangeLog>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/db/changelog/db.changelog-master.xml b/src/main/resources/db/changelog/db.changelog-master.xml
--- a/src/main/resources/db/changelog/db.changelog-master.xml	(revision 078ad760aac03c7b8032888a34d98649589146b4)
+++ b/src/main/resources/db/changelog/db.changelog-master.xml	(date 1713366400982)
@@ -9,13 +9,13 @@
         <dbms type="postgresql"/>
     </preConditions>
 
-    <changeSet id="db-init" author="lambakean">
+    <changeSet id="db-init" author="whotere">
         <tagDatabase tag="db_init"/>
     </changeSet>
 
     <include file="/v.1.0/db.changelog-v.1.0.xml" relativeToChangelogFile="true"/>
 
-    <changeSet id="v.1.0" author="lambakean">
+    <changeSet id="v.1.0" author="whotere">
         <tagDatabase tag="v.1.0"/>
     </changeSet>
 
